{"version":3,"file":"yaml.min.js","sources":["../../src/libs/highlight-es/languages/yaml.js"],"sourcesContent":["/*\r\nLanguage: YAML\r\nDescription: Yet Another Markdown Language\r\nAuthor: Stefan Wienert <stwienert@gmail.com>\r\nContributors: Carl Baxter <carl@cbax.tech>\r\nRequires: ruby.js\r\nWebsite: https://yaml.org\r\nCategory: common, config\r\n*/\r\nexport default function(hljs) {\r\n  const LITERALS = 'true false yes no null';\r\n\r\n  // YAML spec allows non-reserved URI characters in tags.\r\n  const URI_CHARACTERS = '[\\\\w#;/?:@&=+$,.~*\\'()[\\\\]]+';\r\n\r\n  // Define keys as starting with a word character\r\n  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\r\n  // ...and ending with a colon followed immediately by a space, tab or newline.\r\n  // The YAML spec allows for much more than this, but this covers most use-cases.\r\n  const KEY = {\r\n    className: 'attr',\r\n    variants: [\r\n      // added brackets support \r\n      { begin: /\\w[\\w :()\\./-]*:(?=[ \\t]|$)/ },\r\n      { // double quoted keys - with brackets\r\n        begin: /\"\\w[\\w :()\\./-]*\":(?=[ \\t]|$)/ },\r\n      { // single quoted keys - with brackets\r\n        begin: /'\\w[\\w :()\\./-]*':(?=[ \\t]|$)/ },\r\n    ]\r\n  };\r\n\r\n  const TEMPLATE_VARIABLES = {\r\n    className: 'template-variable',\r\n    variants: [\r\n      { // jinja templates Ansible\r\n        begin: /\\{\\{/,\r\n        end: /\\}\\}/\r\n      },\r\n      { // Ruby i18n\r\n        begin: /%\\{/,\r\n        end: /\\}/\r\n      }\r\n    ]\r\n  };\r\n  const STRING = {\r\n    className: 'string',\r\n    relevance: 0,\r\n    variants: [\r\n      {\r\n        begin: /'/,\r\n        end: /'/\r\n      },\r\n      {\r\n        begin: /\"/,\r\n        end: /\"/\r\n      },\r\n      { begin: /\\S+/ }\r\n    ],\r\n    contains: [\r\n      hljs.BACKSLASH_ESCAPE,\r\n      TEMPLATE_VARIABLES\r\n    ]\r\n  };\r\n\r\n  // Strings inside of value containers (objects) can't contain braces,\r\n  // brackets, or commas\r\n  const CONTAINER_STRING = hljs.inherit(STRING, { variants: [\r\n    {\r\n      begin: /'/,\r\n      end: /'/\r\n    },\r\n    {\r\n      begin: /\"/,\r\n      end: /\"/\r\n    },\r\n    { begin: /[^\\s,{}[\\]]+/ }\r\n  ] });\r\n\r\n  const DATE_RE = '[0-9]{4}(-[0-9][0-9]){0,2}';\r\n  const TIME_RE = '([Tt \\\\t][0-9][0-9]?(:[0-9][0-9]){2})?';\r\n  const FRACTION_RE = '(\\\\.[0-9]*)?';\r\n  const ZONE_RE = '([ \\\\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?';\r\n  const TIMESTAMP = {\r\n    className: 'number',\r\n    begin: '\\\\b' + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + '\\\\b'\r\n  };\r\n\r\n  const VALUE_CONTAINER = {\r\n    end: ',',\r\n    endsWithParent: true,\r\n    excludeEnd: true,\r\n    keywords: LITERALS,\r\n    relevance: 0\r\n  };\r\n  const OBJECT = {\r\n    begin: /\\{/,\r\n    end: /\\}/,\r\n    contains: [ VALUE_CONTAINER ],\r\n    illegal: '\\\\n',\r\n    relevance: 0\r\n  };\r\n  const ARRAY = {\r\n    begin: '\\\\[',\r\n    end: '\\\\]',\r\n    contains: [ VALUE_CONTAINER ],\r\n    illegal: '\\\\n',\r\n    relevance: 0\r\n  };\r\n\r\n  const MODES = [\r\n    KEY,\r\n    {\r\n      className: 'meta',\r\n      begin: '^---\\\\s*$',\r\n      relevance: 10\r\n    },\r\n    { // multi line string\r\n      // Blocks start with a | or > followed by a newline\r\n      //\r\n      // Indentation of subsequent lines must be the same to\r\n      // be considered part of the block\r\n      className: 'string',\r\n      begin: '[\\\\|>]([1-9]?[+-])?[ ]*\\\\n( +)[^ ][^\\\\n]*\\\\n(\\\\2[^\\\\n]+\\\\n?)*'\r\n    },\r\n    { // Ruby/Rails erb\r\n      begin: '<%[%=-]?',\r\n      end: '[%-]?%>',\r\n      subLanguage: 'ruby',\r\n      excludeBegin: true,\r\n      excludeEnd: true,\r\n      relevance: 0\r\n    },\r\n    { // named tags\r\n      className: 'type',\r\n      begin: '!\\\\w+!' + URI_CHARACTERS\r\n    },\r\n    // https://yaml.org/spec/1.2/spec.html#id2784064\r\n    { // verbatim tags\r\n      className: 'type',\r\n      begin: '!<' + URI_CHARACTERS + \">\"\r\n    },\r\n    { // primary tags\r\n      className: 'type',\r\n      begin: '!' + URI_CHARACTERS\r\n    },\r\n    { // secondary tags\r\n      className: 'type',\r\n      begin: '!!' + URI_CHARACTERS\r\n    },\r\n    { // fragment id &ref\r\n      className: 'meta',\r\n      begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'\r\n    },\r\n    { // fragment reference *ref\r\n      className: 'meta',\r\n      begin: '\\\\*' + hljs.UNDERSCORE_IDENT_RE + '$'\r\n    },\r\n    { // array listing\r\n      className: 'bullet',\r\n      // TODO: remove |$ hack when we have proper look-ahead support\r\n      begin: '-(?=[ ]|$)',\r\n      relevance: 0\r\n    },\r\n    hljs.HASH_COMMENT_MODE,\r\n    {\r\n      beginKeywords: LITERALS,\r\n      keywords: { literal: LITERALS }\r\n    },\r\n    TIMESTAMP,\r\n    // numbers are any valid C-style number that\r\n    // sit isolated from other words\r\n    {\r\n      className: 'number',\r\n      begin: hljs.C_NUMBER_RE + '\\\\b',\r\n      relevance: 0\r\n    },\r\n    OBJECT,\r\n    ARRAY,\r\n    STRING\r\n  ];\r\n\r\n  const VALUE_MODES = [ ...MODES ];\r\n  VALUE_MODES.pop();\r\n  VALUE_MODES.push(CONTAINER_STRING);\r\n  VALUE_CONTAINER.contains = VALUE_MODES;\r\n\r\n  return {\r\n    name: 'YAML',\r\n    case_insensitive: true,\r\n    aliases: [ 'yml' ],\r\n    contains: MODES\r\n  };\r\n}\r\n"],"names":["yaml","hljs","LITERALS","URI_CHARACTERS","STRING","className","relevance","variants","begin","end","contains","BACKSLASH_ESCAPE","CONTAINER_STRING","inherit","TIMESTAMP","VALUE_CONTAINER","endsWithParent","excludeEnd","keywords","OBJECT","illegal","ARRAY","MODES","subLanguage","excludeBegin","UNDERSCORE_IDENT_RE","HASH_COMMENT_MODE","beginKeywords","literal","C_NUMBER_RE","VALUE_MODES","pop","push","name","case_insensitive","aliases"],"mappings":"AASe,SAAQA,EAACC,GACtB,MAAMC,EAAW,yBAGXC,EAAiB,8BA+BjBC,EAAS,CACbC,UAAW,SACXC,UAAW,EACXC,SAAU,CACR,CACEC,MAAO,IACPC,IAAK,KAEP,CACED,MAAO,IACPC,IAAK,KAEP,CAAED,MAAO,QAEXE,SAAU,CACRT,EAAKU,iBA5BkB,CACzBN,UAAW,oBACXE,SAAU,CACR,CACEC,MAAO,OACPC,IAAK,QAEP,CACED,MAAO,MACPC,IAAK,UA0BLG,EAAmBX,EAAKY,QAAQT,EAAQ,CAAEG,SAAU,CACxD,CACEC,MAAO,IACPC,IAAK,KAEP,CACED,MAAO,IACPC,IAAK,KAEP,CAAED,MAAO,mBAOLM,EAAY,CAChBT,UAAW,SACXG,MAAO,iIAGHO,EAAkB,CACtBN,IAAK,IACLO,gBAAgB,EAChBC,YAAY,EACZC,SAAUhB,EACVI,UAAW,GAEPa,EAAS,CACbX,MAAO,KACPC,IAAK,KACLC,SAAU,CAAEK,GACZK,QAAS,MACTd,UAAW,GAEPe,EAAQ,CACZb,MAAO,MACPC,IAAK,MACLC,SAAU,CAAEK,GACZK,QAAS,MACTd,UAAW,GAGPgB,EAAQ,CA1FF,CACVjB,UAAW,OACXE,SAAU,CAER,CAAEC,MAAO,+BACT,CACEA,MAAO,iCACT,CACEA,MAAO,mCAoFX,CACEH,UAAW,OACXG,MAAO,YACPF,UAAW,IAEb,CAKED,UAAW,SACXG,MAAO,iEAET,CACEA,MAAO,WACPC,IAAK,UACLc,YAAa,OACbC,cAAc,EACdP,YAAY,EACZX,UAAW,GAEb,CACED,UAAW,OACXG,MAAO,SAAWL,GAGpB,CACEE,UAAW,OACXG,MAAO,KAAOL,EAAiB,KAEjC,CACEE,UAAW,OACXG,MAAO,IAAML,GAEf,CACEE,UAAW,OACXG,MAAO,KAAOL,GAEhB,CACEE,UAAW,OACXG,MAAO,IAAMP,EAAKwB,oBAAsB,KAE1C,CACEpB,UAAW,OACXG,MAAO,MAAQP,EAAKwB,oBAAsB,KAE5C,CACEpB,UAAW,SAEXG,MAAO,aACPF,UAAW,GAEbL,EAAKyB,kBACL,CACEC,cAAezB,EACfgB,SAAU,CAAEU,QAAS1B,IAEvBY,EAGA,CACET,UAAW,SACXG,MAAOP,EAAK4B,YAAc,MAC1BvB,UAAW,GAEba,EACAE,EACAjB,GAGI0B,EAAc,IAAKR,GAKzB,OAJAQ,EAAYC,MACZD,EAAYE,KAAKpB,GACjBG,EAAgBL,SAAWoB,EAEpB,CACLG,KAAM,OACNC,kBAAkB,EAClBC,QAAS,CAAE,OACXzB,SAAUY,EAEd"}