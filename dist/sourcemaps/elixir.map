{"version":3,"file":"elixir.min.js","sources":["../../src/libs/highlight-es/languages/elixir.js"],"sourcesContent":["/*\r\nLanguage: Elixir\r\nAuthor: Josh Adams <josh@isotope11.com>\r\nDescription: language definition for Elixir source code files (.ex and .exs).  Based on ruby language support.\r\nCategory: functional\r\nWebsite: https://elixir-lang.org\r\n*/\r\n\r\n/** @type LanguageFn */\r\nexport default function(hljs) {\r\n  const regex = hljs.regex;\r\n  const ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_.]*(!|\\\\?)?';\r\n  const ELIXIR_METHOD_RE = '[a-zA-Z_]\\\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?';\r\n  const KEYWORDS = [\r\n    \"after\",\r\n    \"alias\",\r\n    \"and\",\r\n    \"case\",\r\n    \"catch\",\r\n    \"cond\",\r\n    \"defstruct\",\r\n    \"defguard\",\r\n    \"do\",\r\n    \"else\",\r\n    \"end\",\r\n    \"fn\",\r\n    \"for\",\r\n    \"if\",\r\n    \"import\",\r\n    \"in\",\r\n    \"not\",\r\n    \"or\",\r\n    \"quote\",\r\n    \"raise\",\r\n    \"receive\",\r\n    \"require\",\r\n    \"reraise\",\r\n    \"rescue\",\r\n    \"try\",\r\n    \"unless\",\r\n    \"unquote\",\r\n    \"unquote_splicing\",\r\n    \"use\",\r\n    \"when\",\r\n    \"with|0\"\r\n  ];\r\n  const LITERALS = [\r\n    \"false\",\r\n    \"nil\",\r\n    \"true\"\r\n  ];\r\n  const KWS = {\r\n    $pattern: ELIXIR_IDENT_RE,\r\n    keyword: KEYWORDS,\r\n    literal: LITERALS\r\n  };\r\n  const SUBST = {\r\n    className: 'subst',\r\n    begin: /#\\{/,\r\n    end: /\\}/,\r\n    keywords: KWS\r\n  };\r\n  const NUMBER = {\r\n    className: 'number',\r\n    begin: '(\\\\b0o[0-7_]+)|(\\\\b0b[01_]+)|(\\\\b0x[0-9a-fA-F_]+)|(-?\\\\b[0-9][0-9_]*(\\\\.[0-9_]+([eE][-+]?[0-9]+)?)?)',\r\n    relevance: 0\r\n  };\r\n  // TODO: could be tightened\r\n  // https://elixir-lang.readthedocs.io/en/latest/intro/18.html\r\n  // but you also need to include closing delemeters in the escape list per\r\n  // individual sigil mode from what I can tell,\r\n  // ie: \\} might or might not be an escape depending on the sigil used\r\n  const ESCAPES_RE = /\\\\[\\s\\S]/;\r\n  // const ESCAPES_RE = /\\\\[\"'\\\\abdefnrstv0]/;\r\n  const BACKSLASH_ESCAPE = {\r\n    match: ESCAPES_RE,\r\n    scope: \"char.escape\",\r\n    relevance: 0\r\n  };\r\n  const SIGIL_DELIMITERS = '[/|([{<\"\\']';\r\n  const SIGIL_DELIMITER_MODES = [\r\n    {\r\n      begin: /\"/,\r\n      end: /\"/\r\n    },\r\n    {\r\n      begin: /'/,\r\n      end: /'/\r\n    },\r\n    {\r\n      begin: /\\//,\r\n      end: /\\//\r\n    },\r\n    {\r\n      begin: /\\|/,\r\n      end: /\\|/\r\n    },\r\n    {\r\n      begin: /\\(/,\r\n      end: /\\)/\r\n    },\r\n    {\r\n      begin: /\\[/,\r\n      end: /\\]/\r\n    },\r\n    {\r\n      begin: /\\{/,\r\n      end: /\\}/\r\n    },\r\n    {\r\n      begin: /</,\r\n      end: />/\r\n    }\r\n  ];\r\n  const escapeSigilEnd = (end) => {\r\n    return {\r\n      scope: \"char.escape\",\r\n      begin: regex.concat(/\\\\/, end),\r\n      relevance: 0\r\n    };\r\n  };\r\n  const LOWERCASE_SIGIL = {\r\n    className: 'string',\r\n    begin: '~[a-z]' + '(?=' + SIGIL_DELIMITERS + ')',\r\n    contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\r\n      { contains: [\r\n        escapeSigilEnd(x.end),\r\n        BACKSLASH_ESCAPE,\r\n        SUBST\r\n      ] }\r\n    ))\r\n  };\r\n\r\n  const UPCASE_SIGIL = {\r\n    className: 'string',\r\n    begin: '~[A-Z]' + '(?=' + SIGIL_DELIMITERS + ')',\r\n    contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\r\n      { contains: [ escapeSigilEnd(x.end) ] }\r\n    ))\r\n  };\r\n\r\n  const REGEX_SIGIL = {\r\n    className: 'regex',\r\n    variants: [\r\n      {\r\n        begin: '~r' + '(?=' + SIGIL_DELIMITERS + ')',\r\n        contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\r\n          {\r\n            end: regex.concat(x.end, /[uismxfU]{0,7}/),\r\n            contains: [\r\n              escapeSigilEnd(x.end),\r\n              BACKSLASH_ESCAPE,\r\n              SUBST\r\n            ]\r\n          }\r\n        ))\r\n      },\r\n      {\r\n        begin: '~R' + '(?=' + SIGIL_DELIMITERS + ')',\r\n        contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\r\n          {\r\n            end: regex.concat(x.end, /[uismxfU]{0,7}/),\r\n            contains: [ escapeSigilEnd(x.end) ]\r\n          })\r\n        )\r\n      }\r\n    ]\r\n  };\r\n\r\n  const STRING = {\r\n    className: 'string',\r\n    contains: [\r\n      hljs.BACKSLASH_ESCAPE,\r\n      SUBST\r\n    ],\r\n    variants: [\r\n      {\r\n        begin: /\"\"\"/,\r\n        end: /\"\"\"/\r\n      },\r\n      {\r\n        begin: /'''/,\r\n        end: /'''/\r\n      },\r\n      {\r\n        begin: /~S\"\"\"/,\r\n        end: /\"\"\"/,\r\n        contains: [] // override default\r\n      },\r\n      {\r\n        begin: /~S\"/,\r\n        end: /\"/,\r\n        contains: [] // override default\r\n      },\r\n      {\r\n        begin: /~S'''/,\r\n        end: /'''/,\r\n        contains: [] // override default\r\n      },\r\n      {\r\n        begin: /~S'/,\r\n        end: /'/,\r\n        contains: [] // override default\r\n      },\r\n      {\r\n        begin: /'/,\r\n        end: /'/\r\n      },\r\n      {\r\n        begin: /\"/,\r\n        end: /\"/\r\n      }\r\n    ]\r\n  };\r\n  const FUNCTION = {\r\n    className: 'function',\r\n    beginKeywords: 'def defp defmacro defmacrop',\r\n    end: /\\B\\b/, // the mode is ended by the title\r\n    contains: [\r\n      hljs.inherit(hljs.TITLE_MODE, {\r\n        begin: ELIXIR_IDENT_RE,\r\n        endsParent: true\r\n      })\r\n    ]\r\n  };\r\n  const CLASS = hljs.inherit(FUNCTION, {\r\n    className: 'class',\r\n    beginKeywords: 'defimpl defmodule defprotocol defrecord',\r\n    end: /\\bdo\\b|$|;/\r\n  });\r\n  const ELIXIR_DEFAULT_CONTAINS = [\r\n    STRING,\r\n    REGEX_SIGIL,\r\n    UPCASE_SIGIL,\r\n    LOWERCASE_SIGIL,\r\n    hljs.HASH_COMMENT_MODE,\r\n    CLASS,\r\n    FUNCTION,\r\n    { begin: '::' },\r\n    {\r\n      className: 'symbol',\r\n      begin: ':(?![\\\\s:])',\r\n      contains: [\r\n        STRING,\r\n        { begin: ELIXIR_METHOD_RE }\r\n      ],\r\n      relevance: 0\r\n    },\r\n    {\r\n      className: 'symbol',\r\n      begin: ELIXIR_IDENT_RE + ':(?!:)',\r\n      relevance: 0\r\n    },\r\n    { // Usage of a module, struct, etc.\r\n      className: 'title.class',\r\n      begin: /(\\b[A-Z][a-zA-Z0-9_]+)/,\r\n      relevance: 0\r\n    },\r\n    NUMBER,\r\n    {\r\n      className: 'variable',\r\n      begin: '(\\\\$\\\\W)|((\\\\$|@@?)(\\\\w+))'\r\n    }\r\n    // -> has been removed, capnproto always uses this grammar construct\r\n  ];\r\n  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;\r\n\r\n  return {\r\n    name: 'Elixir',\r\n    aliases: [\r\n      'ex',\r\n      'exs'\r\n    ],\r\n    keywords: KWS,\r\n    contains: ELIXIR_DEFAULT_CONTAINS\r\n  };\r\n}\r\n"],"names":["elixir","hljs","regex","ELIXIR_IDENT_RE","KWS","$pattern","keyword","literal","SUBST","className","begin","end","keywords","BACKSLASH_ESCAPE","match","scope","relevance","SIGIL_DELIMITERS","SIGIL_DELIMITER_MODES","escapeSigilEnd","concat","LOWERCASE_SIGIL","contains","map","x","inherit","UPCASE_SIGIL","REGEX_SIGIL","variants","STRING","FUNCTION","beginKeywords","TITLE_MODE","endsParent","CLASS","ELIXIR_DEFAULT_CONTAINS","HASH_COMMENT_MODE","name","aliases"],"mappings":"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"}