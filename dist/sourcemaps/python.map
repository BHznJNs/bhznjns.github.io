{"version":3,"file":"python.min.js","sources":["../../src/libs/highlight-es/languages/python.js"],"sourcesContent":["/*\r\nLanguage: Python\r\nDescription: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.\r\nWebsite: https://www.python.org\r\nCategory: common\r\n*/\r\n\r\nexport default function(hljs) {\r\n  const regex = hljs.regex;\r\n  const IDENT_RE = /[\\p{XID_Start}_]\\p{XID_Continue}*/u;\r\n  const RESERVED_WORDS = [\r\n    'and',\r\n    'as',\r\n    'assert',\r\n    'async',\r\n    'await',\r\n    'break',\r\n    'case',\r\n    'class',\r\n    'continue',\r\n    'def',\r\n    'del',\r\n    'elif',\r\n    'else',\r\n    'except',\r\n    'finally',\r\n    'for',\r\n    'from',\r\n    'global',\r\n    'if',\r\n    'import',\r\n    'in',\r\n    'is',\r\n    'lambda',\r\n    'match',\r\n    'nonlocal|10',\r\n    'not',\r\n    'or',\r\n    'pass',\r\n    'raise',\r\n    'return',\r\n    'try',\r\n    'while',\r\n    'with',\r\n    'yield'\r\n  ];\r\n\r\n  const BUILT_INS = [\r\n    '__import__',\r\n    'abs',\r\n    'all',\r\n    'any',\r\n    'ascii',\r\n    'bin',\r\n    'bool',\r\n    'breakpoint',\r\n    'bytearray',\r\n    'bytes',\r\n    'callable',\r\n    'chr',\r\n    'classmethod',\r\n    'compile',\r\n    'complex',\r\n    'delattr',\r\n    'dict',\r\n    'dir',\r\n    'divmod',\r\n    'enumerate',\r\n    'eval',\r\n    'exec',\r\n    'filter',\r\n    'float',\r\n    'format',\r\n    'frozenset',\r\n    'getattr',\r\n    'globals',\r\n    'hasattr',\r\n    'hash',\r\n    'help',\r\n    'hex',\r\n    'id',\r\n    'input',\r\n    'int',\r\n    'isinstance',\r\n    'issubclass',\r\n    'iter',\r\n    'len',\r\n    'list',\r\n    'locals',\r\n    'map',\r\n    'max',\r\n    'memoryview',\r\n    'min',\r\n    'next',\r\n    'object',\r\n    'oct',\r\n    'open',\r\n    'ord',\r\n    'pow',\r\n    'print',\r\n    'property',\r\n    'range',\r\n    'repr',\r\n    'reversed',\r\n    'round',\r\n    'set',\r\n    'setattr',\r\n    'slice',\r\n    'sorted',\r\n    'staticmethod',\r\n    'str',\r\n    'sum',\r\n    'super',\r\n    'tuple',\r\n    'type',\r\n    'vars',\r\n    'zip'\r\n  ];\r\n\r\n  const LITERALS = [\r\n    '__debug__',\r\n    'Ellipsis',\r\n    'False',\r\n    'None',\r\n    'NotImplemented',\r\n    'True'\r\n  ];\r\n\r\n  // https://docs.python.org/3/library/typing.html\r\n  // TODO: Could these be supplemented by a CamelCase matcher in certain\r\n  // contexts, leaving these remaining only for relevance hinting?\r\n  const TYPES = [\r\n    \"Any\",\r\n    \"Callable\",\r\n    \"Coroutine\",\r\n    \"Dict\",\r\n    \"List\",\r\n    \"Literal\",\r\n    \"Generic\",\r\n    \"Optional\",\r\n    \"Sequence\",\r\n    \"Set\",\r\n    \"Tuple\",\r\n    \"Type\",\r\n    \"Union\"\r\n  ];\r\n\r\n  const KEYWORDS = {\r\n    $pattern: /[A-Za-z]\\w+|__\\w+__/,\r\n    keyword: RESERVED_WORDS,\r\n    built_in: BUILT_INS,\r\n    literal: LITERALS,\r\n    type: TYPES\r\n  };\r\n\r\n  const PROMPT = {\r\n    className: 'meta',\r\n    begin: /^(>>>|\\.\\.\\.) /\r\n  };\r\n\r\n  const SUBST = {\r\n    className: 'subst',\r\n    begin: /\\{/,\r\n    end: /\\}/,\r\n    keywords: KEYWORDS,\r\n    illegal: /#/\r\n  };\r\n\r\n  const LITERAL_BRACKET = {\r\n    begin: /\\{\\{/,\r\n    relevance: 0\r\n  };\r\n\r\n  const STRING = {\r\n    className: 'string',\r\n    contains: [ hljs.BACKSLASH_ESCAPE ],\r\n    variants: [\r\n      {\r\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\r\n        end: /'''/,\r\n        contains: [\r\n          hljs.BACKSLASH_ESCAPE,\r\n          PROMPT\r\n        ],\r\n        relevance: 10\r\n      },\r\n      {\r\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\r\n        end: /\"\"\"/,\r\n        contains: [\r\n          hljs.BACKSLASH_ESCAPE,\r\n          PROMPT\r\n        ],\r\n        relevance: 10\r\n      },\r\n      {\r\n        begin: /([fF][rR]|[rR][fF]|[fF])'''/,\r\n        end: /'''/,\r\n        contains: [\r\n          hljs.BACKSLASH_ESCAPE,\r\n          PROMPT,\r\n          LITERAL_BRACKET,\r\n          SUBST\r\n        ]\r\n      },\r\n      {\r\n        begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\r\n        end: /\"\"\"/,\r\n        contains: [\r\n          hljs.BACKSLASH_ESCAPE,\r\n          PROMPT,\r\n          LITERAL_BRACKET,\r\n          SUBST\r\n        ]\r\n      },\r\n      {\r\n        begin: /([uU]|[rR])'/,\r\n        end: /'/,\r\n        relevance: 10\r\n      },\r\n      {\r\n        begin: /([uU]|[rR])\"/,\r\n        end: /\"/,\r\n        relevance: 10\r\n      },\r\n      {\r\n        begin: /([bB]|[bB][rR]|[rR][bB])'/,\r\n        end: /'/\r\n      },\r\n      {\r\n        begin: /([bB]|[bB][rR]|[rR][bB])\"/,\r\n        end: /\"/\r\n      },\r\n      {\r\n        begin: /([fF][rR]|[rR][fF]|[fF])'/,\r\n        end: /'/,\r\n        contains: [\r\n          hljs.BACKSLASH_ESCAPE,\r\n          LITERAL_BRACKET,\r\n          SUBST\r\n        ]\r\n      },\r\n      {\r\n        begin: /([fF][rR]|[rR][fF]|[fF])\"/,\r\n        end: /\"/,\r\n        contains: [\r\n          hljs.BACKSLASH_ESCAPE,\r\n          LITERAL_BRACKET,\r\n          SUBST\r\n        ]\r\n      },\r\n      hljs.APOS_STRING_MODE,\r\n      hljs.QUOTE_STRING_MODE\r\n    ]\r\n  };\r\n\r\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals\r\n  const digitpart = '[0-9](_?[0-9])*';\r\n  const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;\r\n  // Whitespace after a number (or any lexical token) is needed only if its absence\r\n  // would change the tokenization\r\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#whitespace-between-tokens\r\n  // We deviate slightly, requiring a word boundary or a keyword\r\n  // to avoid accidentally recognizing *prefixes* (e.g., `0` in `0x41` or `08` or `0__1`)\r\n  const lookahead = `\\\\b|${RESERVED_WORDS.join('|')}`;\r\n  const NUMBER = {\r\n    className: 'number',\r\n    relevance: 0,\r\n    variants: [\r\n      // exponentfloat, pointfloat\r\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\r\n      // optionally imaginary\r\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\r\n      // Note: no leading \\b because floats can start with a decimal point\r\n      // and we don't want to mishandle e.g. `fn(.5)`,\r\n      // no trailing \\b for pointfloat because it can end with a decimal point\r\n      // and we don't want to mishandle e.g. `0..hex()`; this should be safe\r\n      // because both MUST contain a decimal point and so cannot be confused with\r\n      // the interior part of an identifier\r\n      {\r\n        begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead})`\r\n      },\r\n      {\r\n        begin: `(${pointfloat})[jJ]?`\r\n      },\r\n\r\n      // decinteger, bininteger, octinteger, hexinteger\r\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\r\n      // optionally \"long\" in Python 2\r\n      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\r\n      // decinteger is optionally imaginary\r\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\r\n      {\r\n        begin: `\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead})`\r\n      },\r\n      {\r\n        begin: `\\\\b0[bB](_?[01])+[lL]?(?=${lookahead})`\r\n      },\r\n      {\r\n        begin: `\\\\b0[oO](_?[0-7])+[lL]?(?=${lookahead})`\r\n      },\r\n      {\r\n        begin: `\\\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead})`\r\n      },\r\n\r\n      // imagnumber (digitpart-based)\r\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\r\n      {\r\n        begin: `\\\\b(${digitpart})[jJ](?=${lookahead})`\r\n      }\r\n    ]\r\n  };\r\n  const COMMENT_TYPE = {\r\n    className: \"comment\",\r\n    begin: regex.lookahead(/# type:/),\r\n    end: /$/,\r\n    keywords: KEYWORDS,\r\n    contains: [\r\n      { // prevent keywords from coloring `type`\r\n        begin: /# type:/\r\n      },\r\n      // comment within a datatype comment includes no keywords\r\n      {\r\n        begin: /#/,\r\n        end: /\\b\\B/,\r\n        endsWithParent: true\r\n      }\r\n    ]\r\n  };\r\n  const PARAMS = {\r\n    className: 'params',\r\n    variants: [\r\n      // Exclude params in functions without params\r\n      {\r\n        className: \"\",\r\n        begin: /\\(\\s*\\)/,\r\n        skip: true\r\n      },\r\n      {\r\n        begin: /\\(/,\r\n        end: /\\)/,\r\n        excludeBegin: true,\r\n        excludeEnd: true,\r\n        keywords: KEYWORDS,\r\n        contains: [\r\n          'self',\r\n          PROMPT,\r\n          NUMBER,\r\n          STRING,\r\n          hljs.HASH_COMMENT_MODE\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n  SUBST.contains = [\r\n    STRING,\r\n    NUMBER,\r\n    PROMPT\r\n  ];\r\n\r\n  return {\r\n    name: 'Python',\r\n    aliases: [\r\n      'py',\r\n      'gyp',\r\n      'ipython'\r\n    ],\r\n    unicodeRegex: true,\r\n    keywords: KEYWORDS,\r\n    illegal: /(<\\/|\\?)|=>/,\r\n    contains: [\r\n      PROMPT,\r\n      NUMBER,\r\n      {\r\n        // very common convention\r\n        begin: /\\bself\\b/\r\n      },\r\n      {\r\n        // eat \"if\" prior to string so that it won't accidentally be\r\n        // labeled as an f-string\r\n        beginKeywords: \"if\",\r\n        relevance: 0\r\n      },\r\n      { match: /\\bor\\b/, scope: \"keyword\" },\r\n      STRING,\r\n      COMMENT_TYPE,\r\n      hljs.HASH_COMMENT_MODE,\r\n      {\r\n        match: [\r\n          /\\bdef/, /\\s+/,\r\n          IDENT_RE,\r\n        ],\r\n        scope: {\r\n          1: \"keyword\",\r\n          3: \"title.function\"\r\n        },\r\n        contains: [ PARAMS ]\r\n      },\r\n      {\r\n        variants: [\r\n          {\r\n            match: [\r\n              /\\bclass/, /\\s+/,\r\n              IDENT_RE, /\\s*/,\r\n              /\\(\\s*/, IDENT_RE,/\\s*\\)/\r\n            ],\r\n          },\r\n          {\r\n            match: [\r\n              /\\bclass/, /\\s+/,\r\n              IDENT_RE\r\n            ],\r\n          }\r\n        ],\r\n        scope: {\r\n          1: \"keyword\",\r\n          3: \"title.class\",\r\n          6: \"title.class.inherited\",\r\n        }\r\n      },\r\n      {\r\n        className: 'meta',\r\n        begin: /^[\\t ]*@/,\r\n        end: /(?=#)|$/,\r\n        contains: [\r\n          NUMBER,\r\n          PARAMS,\r\n          STRING\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n}\r\n"],"names":["python","hljs","regex","IDENT_RE","RESERVED_WORDS","KEYWORDS","$pattern","keyword","built_in","literal","type","PROMPT","className","begin","SUBST","end","keywords","illegal","LITERAL_BRACKET","relevance","STRING","contains","BACKSLASH_ESCAPE","variants","APOS_STRING_MODE","QUOTE_STRING_MODE","digitpart","pointfloat","lookahead","join","NUMBER","COMMENT_TYPE","endsWithParent","PARAMS","skip","excludeBegin","excludeEnd","HASH_COMMENT_MODE","name","aliases","unicodeRegex","beginKeywords","match","scope"],"mappings":"AAOe,SAAQA,EAACC,GACtB,MAAMC,EAAQD,EAAKC,MACbC,EAAW,qCACXC,EAAiB,CACrB,MACA,KACA,SACA,QACA,QACA,QACA,OACA,QACA,WACA,MACA,MACA,OACA,OACA,SACA,UACA,MACA,OACA,SACA,KACA,SACA,KACA,KACA,SACA,QACA,cACA,MACA,KACA,OACA,QACA,SACA,MACA,QACA,OACA,SAuGIC,EAAW,CACfC,SAAU,sBACVC,QAASH,EACTI,SAvGgB,CAChB,aACA,MACA,MACA,MACA,QACA,MACA,OACA,aACA,YACA,QACA,WACA,MACA,cACA,UACA,UACA,UACA,OACA,MACA,SACA,YACA,OACA,OACA,SACA,QACA,SACA,YACA,UACA,UACA,UACA,OACA,OACA,MACA,KACA,QACA,MACA,aACA,aACA,OACA,MACA,OACA,SACA,MACA,MACA,aACA,MACA,OACA,SACA,MACA,OACA,MACA,MACA,QACA,WACA,QACA,OACA,WACA,QACA,MACA,UACA,QACA,SACA,eACA,MACA,MACA,QACA,QACA,OACA,OACA,OAmCAC,QAhCe,CACf,YACA,WACA,QACA,OACA,iBACA,QA2BAC,KArBY,CACZ,MACA,WACA,YACA,OACA,OACA,UACA,UACA,WACA,WACA,MACA,QACA,OACA,UAWIC,EAAS,CACbC,UAAW,OACXC,MAAO,kBAGHC,EAAQ,CACZF,UAAW,QACXC,MAAO,KACPE,IAAK,KACLC,SAAUX,EACVY,QAAS,KAGLC,EAAkB,CACtBL,MAAO,OACPM,UAAW,GAGPC,EAAS,CACbR,UAAW,SACXS,SAAU,CAAEpB,EAAKqB,kBACjBC,SAAU,CACR,CACEV,MAAO,yCACPE,IAAK,MACLM,SAAU,CACRpB,EAAKqB,iBACLX,GAEFQ,UAAW,IAEb,CACEN,MAAO,yCACPE,IAAK,MACLM,SAAU,CACRpB,EAAKqB,iBACLX,GAEFQ,UAAW,IAEb,CACEN,MAAO,8BACPE,IAAK,MACLM,SAAU,CACRpB,EAAKqB,iBACLX,EACAO,EACAJ,IAGJ,CACED,MAAO,8BACPE,IAAK,MACLM,SAAU,CACRpB,EAAKqB,iBACLX,EACAO,EACAJ,IAGJ,CACED,MAAO,eACPE,IAAK,IACLI,UAAW,IAEb,CACEN,MAAO,eACPE,IAAK,IACLI,UAAW,IAEb,CACEN,MAAO,4BACPE,IAAK,KAEP,CACEF,MAAO,4BACPE,IAAK,KAEP,CACEF,MAAO,4BACPE,IAAK,IACLM,SAAU,CACRpB,EAAKqB,iBACLJ,EACAJ,IAGJ,CACED,MAAO,4BACPE,IAAK,IACLM,SAAU,CACRpB,EAAKqB,iBACLJ,EACAJ,IAGJb,EAAKuB,iBACLvB,EAAKwB,oBAKHC,EAAY,kBACZC,EAAa,QAAQD,WAAmBA,UAAkBA,QAM1DE,EAAY,OAAOxB,EAAeyB,KAAK,OACvCC,EAAS,CACblB,UAAW,SACXO,UAAW,EACXI,SAAU,CAWR,CACEV,MAAO,QAAQa,OAAeC,gBAAyBD,aAAqBE,MAE9E,CACEf,MAAO,IAAIc,WASb,CACEd,MAAO,0CAA0Ce,MAEnD,CACEf,MAAO,4BAA4Be,MAErC,CACEf,MAAO,6BAA6Be,MAEtC,CACEf,MAAO,mCAAmCe,MAK5C,CACEf,MAAO,OAAOa,YAAoBE,QAIlCG,EAAe,CACnBnB,UAAW,UACXC,MAAOX,EAAM0B,UAAU,WACvBb,IAAK,IACLC,SAAUX,EACVgB,SAAU,CACR,CACER,MAAO,WAGT,CACEA,MAAO,IACPE,IAAK,OACLiB,gBAAgB,KAIhBC,EAAS,CACbrB,UAAW,SACXW,SAAU,CAER,CACEX,UAAW,GACXC,MAAO,UACPqB,MAAM,GAER,CACErB,MAAO,KACPE,IAAK,KACLoB,cAAc,EACdC,YAAY,EACZpB,SAAUX,EACVgB,SAAU,CACR,OACAV,EACAmB,EACAV,EACAnB,EAAKoC,sBAWb,OANAvB,EAAMO,SAAW,CACfD,EACAU,EACAnB,GAGK,CACL2B,KAAM,SACNC,QAAS,CACP,KACA,MACA,WAEFC,cAAc,EACdxB,SAAUX,EACVY,QAAS,cACTI,SAAU,CACRV,EACAmB,EACA,CAEEjB,MAAO,YAET,CAGE4B,cAAe,KACftB,UAAW,GAEb,CAAEuB,MAAO,SAAUC,MAAO,WAC1BvB,EACAW,EACA9B,EAAKoC,kBACL,CACEK,MAAO,CACL,QAAS,MACTvC,GAEFwC,MAAO,CACL,EAAG,UACH,EAAG,kBAELtB,SAAU,CAAEY,IAEd,CACEV,SAAU,CACR,CACEmB,MAAO,CACL,UAAW,MACXvC,EAAU,MACV,QAASA,EAAS,UAGtB,CACEuC,MAAO,CACL,UAAW,MACXvC,KAINwC,MAAO,CACL,EAAG,UACH,EAAG,cACH,EAAG,0BAGP,CACE/B,UAAW,OACXC,MAAO,WACPE,IAAK,UACLM,SAAU,CACRS,EACAG,EACAb,KAKV"}