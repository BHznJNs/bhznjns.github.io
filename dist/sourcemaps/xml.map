{"version":3,"file":"xml.min.js","sources":["../../src/libs/highlight-es/languages/xml.js"],"sourcesContent":["/*\r\nLanguage: HTML, XML\r\nWebsite: https://www.w3.org/XML/\r\nCategory: common, web\r\nAudit: 2020\r\n*/\r\n\r\n/** @type LanguageFn */\r\nexport default function(hljs) {\r\n  const regex = hljs.regex;\r\n  // XML names can have the following additional letters: https://www.w3.org/TR/xml/#NT-NameChar\r\n  // OTHER_NAME_CHARS = /[:\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]/;\r\n  // Element names start with NAME_START_CHAR followed by optional other Unicode letters, ASCII digits, hyphens, underscores, and periods\r\n  // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/, regex.optional(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*:/), /[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*/);;\r\n  // const XML_IDENT_RE = /[A-Z_a-z:\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]+/;\r\n  // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/, regex.optional(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*:/), /[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*/);\r\n  // however, to cater for performance and more Unicode support rely simply on the Unicode letter class\r\n  const TAG_NAME_RE = regex.concat(/[\\p{L}_]/u, regex.optional(/[\\p{L}0-9_.-]*:/u), /[\\p{L}0-9_.-]*/u);\r\n  const XML_IDENT_RE = /[\\p{L}0-9._:-]+/u;\r\n  const XML_ENTITIES = {\r\n    className: 'symbol',\r\n    begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/\r\n  };\r\n  const XML_META_KEYWORDS = {\r\n    begin: /\\s/,\r\n    contains: [\r\n      {\r\n        className: 'keyword',\r\n        begin: /#?[a-z_][a-z1-9_-]+/,\r\n        illegal: /\\n/\r\n      }\r\n    ]\r\n  };\r\n  const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {\r\n    begin: /\\(/,\r\n    end: /\\)/\r\n  });\r\n  const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, { className: 'string' });\r\n  const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' });\r\n  const TAG_INTERNALS = {\r\n    endsWithParent: true,\r\n    illegal: /</,\r\n    relevance: 0,\r\n    contains: [\r\n      {\r\n        className: 'attr',\r\n        begin: XML_IDENT_RE,\r\n        relevance: 0\r\n      },\r\n      {\r\n        begin: /=\\s*/,\r\n        relevance: 0,\r\n        contains: [\r\n          {\r\n            className: 'string',\r\n            endsParent: true,\r\n            variants: [\r\n              {\r\n                begin: /\"/,\r\n                end: /\"/,\r\n                contains: [ XML_ENTITIES ]\r\n              },\r\n              {\r\n                begin: /'/,\r\n                end: /'/,\r\n                contains: [ XML_ENTITIES ]\r\n              },\r\n              { begin: /[^\\s\"'=<>`]+/ }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n  return {\r\n    name: 'HTML, XML',\r\n    aliases: [\r\n      'html',\r\n      'xhtml',\r\n      'rss',\r\n      'atom',\r\n      'xjb',\r\n      'xsd',\r\n      'xsl',\r\n      'plist',\r\n      'wsf',\r\n      'svg'\r\n    ],\r\n    case_insensitive: true,\r\n    unicodeRegex: true,\r\n    contains: [\r\n      {\r\n        className: 'meta',\r\n        begin: /<![a-z]/,\r\n        end: />/,\r\n        relevance: 10,\r\n        contains: [\r\n          XML_META_KEYWORDS,\r\n          QUOTE_META_STRING_MODE,\r\n          APOS_META_STRING_MODE,\r\n          XML_META_PAR_KEYWORDS,\r\n          {\r\n            begin: /\\[/,\r\n            end: /\\]/,\r\n            contains: [\r\n              {\r\n                className: 'meta',\r\n                begin: /<![a-z]/,\r\n                end: />/,\r\n                contains: [\r\n                  XML_META_KEYWORDS,\r\n                  XML_META_PAR_KEYWORDS,\r\n                  QUOTE_META_STRING_MODE,\r\n                  APOS_META_STRING_MODE\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      hljs.COMMENT(\r\n        /<!--/,\r\n        /-->/,\r\n        { relevance: 10 }\r\n      ),\r\n      {\r\n        begin: /<!\\[CDATA\\[/,\r\n        end: /\\]\\]>/,\r\n        relevance: 10\r\n      },\r\n      XML_ENTITIES,\r\n      // xml processing instructions\r\n      {\r\n        className: 'meta',\r\n        end: /\\?>/,\r\n        variants: [\r\n          {\r\n            begin: /<\\?xml/,\r\n            relevance: 10,\r\n            contains: [\r\n              QUOTE_META_STRING_MODE\r\n            ]\r\n          },\r\n          {\r\n            begin: /<\\?[a-z][a-z0-9]+/,\r\n          }\r\n        ]\r\n\r\n      },\r\n      {\r\n        className: 'tag',\r\n        /*\r\n        The lookahead pattern (?=...) ensures that 'begin' only matches\r\n        '<style' as a single word, followed by a whitespace or an\r\n        ending bracket.\r\n        */\r\n        begin: /<style(?=\\s|>)/,\r\n        end: />/,\r\n        keywords: { name: 'style' },\r\n        contains: [ TAG_INTERNALS ],\r\n        starts: {\r\n          end: /<\\/style>/,\r\n          returnEnd: true,\r\n          subLanguage: [\r\n            'css',\r\n            'xml'\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        className: 'tag',\r\n        // See the comment in the <style tag about the lookahead pattern\r\n        begin: /<script(?=\\s|>)/,\r\n        end: />/,\r\n        keywords: { name: 'script' },\r\n        contains: [ TAG_INTERNALS ],\r\n        starts: {\r\n          end: /<\\/script>/,\r\n          returnEnd: true,\r\n          subLanguage: [\r\n            'javascript',\r\n            'handlebars',\r\n            'xml'\r\n          ]\r\n        }\r\n      },\r\n      // we need this for now for jSX\r\n      {\r\n        className: 'tag',\r\n        begin: /<>|<\\/>/\r\n      },\r\n      // open tag\r\n      {\r\n        className: 'tag',\r\n        begin: regex.concat(\r\n          /</,\r\n          regex.lookahead(regex.concat(\r\n            TAG_NAME_RE,\r\n            // <tag/>\r\n            // <tag>\r\n            // <tag ...\r\n            regex.either(/\\/>/, />/, /\\s/)\r\n          ))\r\n        ),\r\n        end: /\\/?>/,\r\n        contains: [\r\n          {\r\n            className: 'name',\r\n            begin: TAG_NAME_RE,\r\n            relevance: 0,\r\n            starts: TAG_INTERNALS\r\n          }\r\n        ]\r\n      },\r\n      // close tag\r\n      {\r\n        className: 'tag',\r\n        begin: regex.concat(\r\n          /<\\//,\r\n          regex.lookahead(regex.concat(\r\n            TAG_NAME_RE, />/\r\n          ))\r\n        ),\r\n        contains: [\r\n          {\r\n            className: 'name',\r\n            begin: TAG_NAME_RE,\r\n            relevance: 0\r\n          },\r\n          {\r\n            begin: />/,\r\n            relevance: 0,\r\n            endsParent: true\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n}\r\n"],"names":["xml","hljs","regex","TAG_NAME_RE","concat","optional","XML_ENTITIES","className","begin","XML_META_KEYWORDS","contains","illegal","XML_META_PAR_KEYWORDS","inherit","end","APOS_META_STRING_MODE","APOS_STRING_MODE","QUOTE_META_STRING_MODE","QUOTE_STRING_MODE","TAG_INTERNALS","endsWithParent","relevance","endsParent","variants","name","aliases","case_insensitive","unicodeRegex","COMMENT","keywords","starts","returnEnd","subLanguage","lookahead","either"],"mappings":"AAQe,SAAQA,EAACC,GACtB,MAAMC,EAAQD,EAAKC,MAQbC,EAAcD,EAAME,OAAO,YAAaF,EAAMG,SAAS,oBAAqB,mBAE5EC,EAAe,CACnBC,UAAW,SACXC,MAAO,oCAEHC,EAAoB,CACxBD,MAAO,KACPE,SAAU,CACR,CACEH,UAAW,UACXC,MAAO,sBACPG,QAAS,QAITC,EAAwBX,EAAKY,QAAQJ,EAAmB,CAC5DD,MAAO,KACPM,IAAK,OAEDC,EAAwBd,EAAKY,QAAQZ,EAAKe,iBAAkB,CAAET,UAAW,WACzEU,EAAyBhB,EAAKY,QAAQZ,EAAKiB,kBAAmB,CAAEX,UAAW,WAC3EY,EAAgB,CACpBC,gBAAgB,EAChBT,QAAS,IACTU,UAAW,EACXX,SAAU,CACR,CACEH,UAAW,OACXC,MA5Be,mBA6Bfa,UAAW,GAEb,CACEb,MAAO,OACPa,UAAW,EACXX,SAAU,CACR,CACEH,UAAW,SACXe,YAAY,EACZC,SAAU,CACR,CACEf,MAAO,IACPM,IAAK,IACLJ,SAAU,CAAEJ,IAEd,CACEE,MAAO,IACPM,IAAK,IACLJ,SAAU,CAAEJ,IAEd,CAAEE,MAAO,sBAOrB,MAAO,CACLgB,KAAM,YACNC,QAAS,CACP,OACA,QACA,MACA,OACA,MACA,MACA,MACA,QACA,MACA,OAEFC,kBAAkB,EAClBC,cAAc,EACdjB,SAAU,CACR,CACEH,UAAW,OACXC,MAAO,UACPM,IAAK,IACLO,UAAW,GACXX,SAAU,CACRD,EACAQ,EACAF,EACAH,EACA,CACEJ,MAAO,KACPM,IAAK,KACLJ,SAAU,CACR,CACEH,UAAW,OACXC,MAAO,UACPM,IAAK,IACLJ,SAAU,CACRD,EACAG,EACAK,EACAF,QAOZd,EAAK2B,QACH,OACA,MACA,CAAEP,UAAW,KAEf,CACEb,MAAO,cACPM,IAAK,QACLO,UAAW,IAEbf,EAEA,CACEC,UAAW,OACXO,IAAK,MACLS,SAAU,CACR,CACEf,MAAO,SACPa,UAAW,GACXX,SAAU,CACRO,IAGJ,CACET,MAAO,uBAKb,CACED,UAAW,MAMXC,MAAO,iBACPM,IAAK,IACLe,SAAU,CAAEL,KAAM,SAClBd,SAAU,CAAES,GACZW,OAAQ,CACNhB,IAAK,YACLiB,WAAW,EACXC,YAAa,CACX,MACA,SAIN,CACEzB,UAAW,MAEXC,MAAO,kBACPM,IAAK,IACLe,SAAU,CAAEL,KAAM,UAClBd,SAAU,CAAES,GACZW,OAAQ,CACNhB,IAAK,aACLiB,WAAW,EACXC,YAAa,CACX,aACA,aACA,SAKN,CACEzB,UAAW,MACXC,MAAO,WAGT,CACED,UAAW,MACXC,MAAON,EAAME,OACX,IACAF,EAAM+B,UAAU/B,EAAME,OACpBD,EAIAD,EAAMgC,OAAO,MAAO,IAAK,SAG7BpB,IAAK,OACLJ,SAAU,CACR,CACEH,UAAW,OACXC,MAAOL,EACPkB,UAAW,EACXS,OAAQX,KAKd,CACEZ,UAAW,MACXC,MAAON,EAAME,OACX,MACAF,EAAM+B,UAAU/B,EAAME,OACpBD,EAAa,OAGjBO,SAAU,CACR,CACEH,UAAW,OACXC,MAAOL,EACPkB,UAAW,GAEb,CACEb,MAAO,IACPa,UAAW,EACXC,YAAY,MAMxB"}