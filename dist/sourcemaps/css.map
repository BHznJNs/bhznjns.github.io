{"version":3,"file":"css.min.js","sources":["../../src/libs/highlight-es/languages/css.js"],"sourcesContent":["/*\r\nLanguage: CSS\r\nCategory: common, css, web\r\nWebsite: https://developer.mozilla.org/en-US/docs/Web/CSS\r\n*/\r\n\r\n// @ts-ignore\r\nimport * as css from \"./lib/css-shared.js\";\r\n\r\n/** @type LanguageFn */\r\nexport default function(hljs) {\r\n  const regex = hljs.regex;\r\n  const modes = css.MODES(hljs);\r\n  const VENDOR_PREFIX = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ };\r\n  const AT_MODIFIERS = \"and or not only\";\r\n  const AT_PROPERTY_RE = /@-?\\w[\\w]*(-\\w+)*/; // @-webkit-keyframes\r\n  const IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';\r\n  const STRINGS = [\r\n    hljs.APOS_STRING_MODE,\r\n    hljs.QUOTE_STRING_MODE\r\n  ];\r\n\r\n  return {\r\n    name: 'CSS',\r\n    case_insensitive: true,\r\n    illegal: /[=|'\\$]/,\r\n    keywords: { keyframePosition: \"from to\" },\r\n    classNameAliases: {\r\n      // for visual continuity with `tag {}` and because we\r\n      // don't have a great class for this?\r\n      keyframePosition: \"selector-tag\" },\r\n    contains: [\r\n      modes.BLOCK_COMMENT,\r\n      VENDOR_PREFIX,\r\n      // to recognize keyframe 40% etc which are outside the scope of our\r\n      // attribute value mode\r\n      modes.CSS_NUMBER_MODE,\r\n      {\r\n        className: 'selector-id',\r\n        begin: /#[A-Za-z0-9_-]+/,\r\n        relevance: 0\r\n      },\r\n      {\r\n        className: 'selector-class',\r\n        begin: '\\\\.' + IDENT_RE,\r\n        relevance: 0\r\n      },\r\n      modes.ATTRIBUTE_SELECTOR_MODE,\r\n      {\r\n        className: 'selector-pseudo',\r\n        variants: [\r\n          { begin: ':(' + css.PSEUDO_CLASSES.join('|') + ')' },\r\n          { begin: ':(:)?(' + css.PSEUDO_ELEMENTS.join('|') + ')' }\r\n        ]\r\n      },\r\n      // we may actually need this (12/2020)\r\n      // { // pseudo-selector params\r\n      //   begin: /\\(/,\r\n      //   end: /\\)/,\r\n      //   contains: [ hljs.CSS_NUMBER_MODE ]\r\n      // },\r\n      modes.CSS_VARIABLE,\r\n      {\r\n        className: 'attribute',\r\n        begin: '\\\\b(' + css.ATTRIBUTES.join('|') + ')\\\\b'\r\n      },\r\n      // attribute values\r\n      {\r\n        begin: /:/,\r\n        end: /[;}{]/,\r\n        contains: [\r\n          modes.BLOCK_COMMENT,\r\n          modes.HEXCOLOR,\r\n          modes.IMPORTANT,\r\n          modes.CSS_NUMBER_MODE,\r\n          ...STRINGS,\r\n          // needed to highlight these as strings and to avoid issues with\r\n          // illegal characters that might be inside urls that would tigger the\r\n          // languages illegal stack\r\n          {\r\n            begin: /(url|data-uri)\\(/,\r\n            end: /\\)/,\r\n            relevance: 0, // from keywords\r\n            keywords: { built_in: \"url data-uri\" },\r\n            contains: [\r\n              ...STRINGS,\r\n              {\r\n                className: \"string\",\r\n                // any character other than `)` as in `url()` will be the start\r\n                // of a string, which ends with `)` (from the parent mode)\r\n                begin: /[^)]/,\r\n                endsWithParent: true,\r\n                excludeEnd: true\r\n              }\r\n            ]\r\n          },\r\n          modes.FUNCTION_DISPATCH\r\n        ]\r\n      },\r\n      {\r\n        begin: regex.lookahead(/@/),\r\n        end: '[{;]',\r\n        relevance: 0,\r\n        illegal: /:/, // break on Less variables @var: ...\r\n        contains: [\r\n          {\r\n            className: 'keyword',\r\n            begin: AT_PROPERTY_RE\r\n          },\r\n          {\r\n            begin: /\\s/,\r\n            endsWithParent: true,\r\n            excludeEnd: true,\r\n            relevance: 0,\r\n            keywords: {\r\n              $pattern: /[a-z-]+/,\r\n              keyword: AT_MODIFIERS,\r\n              attribute: css.MEDIA_FEATURES.join(\" \")\r\n            },\r\n            contains: [\r\n              {\r\n                begin: /[a-z-]+(?=:)/,\r\n                className: \"attribute\"\r\n              },\r\n              ...STRINGS,\r\n              modes.CSS_NUMBER_MODE\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        className: 'selector-tag',\r\n        begin: '\\\\b(' + css.TAGS.join('|') + ')\\\\b'\r\n      }\r\n    ]\r\n  };\r\n}\r\n"],"names":["css","hljs","regex","modes","css.MODES","STRINGS","APOS_STRING_MODE","QUOTE_STRING_MODE","name","case_insensitive","illegal","keywords","keyframePosition","classNameAliases","contains","BLOCK_COMMENT","begin","CSS_NUMBER_MODE","className","relevance","ATTRIBUTE_SELECTOR_MODE","variants","css.PSEUDO_CLASSES","join","css.PSEUDO_ELEMENTS","CSS_VARIABLE","css.ATTRIBUTES","end","HEXCOLOR","IMPORTANT","built_in","endsWithParent","excludeEnd","FUNCTION_DISPATCH","lookahead","$pattern","keyword","attribute","css.MEDIA_FEATURES","css.TAGS"],"mappings":"2EAUe,SAAQA,EAACC,GACtB,MAAMC,EAAQD,EAAKC,MACbC,EAAQC,EAAUH,GAKlBI,EAAU,CACdJ,EAAKK,iBACLL,EAAKM,mBAGP,MAAO,CACLC,KAAM,MACNC,kBAAkB,EAClBC,QAAS,UACTC,SAAU,CAAEC,iBAAkB,WAC9BC,iBAAkB,CAGhBD,iBAAkB,gBACpBE,SAAU,CACRX,EAAMY,cAnBY,CAAEC,MAAO,gCAuB3Bb,EAAMc,gBACN,CACEC,UAAW,cACXF,MAAO,kBACPG,UAAW,GAEb,CACED,UAAW,iBACXF,MAAO,6BACPG,UAAW,GAEbhB,EAAMiB,wBACN,CACEF,UAAW,kBACXG,SAAU,CACR,CAAEL,MAAO,KAAOM,EAAmBC,KAAK,KAAO,KAC/C,CAAEP,MAAO,SAAWQ,EAAoBD,KAAK,KAAO,OASxDpB,EAAMsB,aACN,CACEP,UAAW,YACXF,MAAO,OAASU,EAAeH,KAAK,KAAO,QAG7C,CACEP,MAAO,IACPW,IAAK,QACLb,SAAU,CACRX,EAAMY,cACNZ,EAAMyB,SACNzB,EAAM0B,UACN1B,EAAMc,mBACHZ,EAIH,CACEW,MAAO,mBACPW,IAAK,KACLR,UAAW,EACXR,SAAU,CAAEmB,SAAU,gBACtBhB,SAAU,IACLT,EACH,CACEa,UAAW,SAGXF,MAAO,OACPe,gBAAgB,EAChBC,YAAY,KAIlB7B,EAAM8B,oBAGV,CACEjB,MAAOd,EAAMgC,UAAU,KACvBP,IAAK,OACLR,UAAW,EACXT,QAAS,IACTI,SAAU,CACR,CACEI,UAAW,UACXF,MA5Fa,qBA8Ff,CACEA,MAAO,KACPe,gBAAgB,EAChBC,YAAY,EACZb,UAAW,EACXR,SAAU,CACRwB,SAAU,UACVC,QAtGS,kBAuGTC,UAAWC,EAAmBf,KAAK,MAErCT,SAAU,CACR,CACEE,MAAO,eACPE,UAAW,gBAEVb,EACHF,EAAMc,oBAKd,CACEC,UAAW,eACXF,MAAO,OAASuB,EAAShB,KAAK,KAAO,SAI7C"}