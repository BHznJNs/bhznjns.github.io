{"version":3,"file":"ini.min.js","sources":["../../src/libs/highlight-es/languages/ini.js"],"sourcesContent":["/*\r\nLanguage: TOML, also INI\r\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\r\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\r\nCategory: common, config\r\nWebsite: https://github.com/toml-lang/toml\r\n*/\r\n\r\nexport default function(hljs) {\r\n  const regex = hljs.regex;\r\n  const NUMBERS = {\r\n    className: 'number',\r\n    relevance: 0,\r\n    variants: [\r\n      { begin: /([+-]+)?[\\d]+_[\\d_]+/ },\r\n      { begin: hljs.NUMBER_RE }\r\n    ]\r\n  };\r\n  const COMMENTS = hljs.COMMENT();\r\n  COMMENTS.variants = [\r\n    {\r\n      begin: /;/,\r\n      end: /$/\r\n    },\r\n    {\r\n      begin: /#/,\r\n      end: /$/\r\n    }\r\n  ];\r\n  const VARIABLES = {\r\n    className: 'variable',\r\n    variants: [\r\n      { begin: /\\$[\\w\\d\"][\\w\\d_]*/ },\r\n      { begin: /\\$\\{(.*?)\\}/ }\r\n    ]\r\n  };\r\n  const LITERALS = {\r\n    className: 'literal',\r\n    begin: /\\bon|off|true|false|yes|no\\b/\r\n  };\r\n  const STRINGS = {\r\n    className: \"string\",\r\n    contains: [ hljs.BACKSLASH_ESCAPE ],\r\n    variants: [\r\n      {\r\n        begin: \"'''\",\r\n        end: \"'''\",\r\n        relevance: 10\r\n      },\r\n      {\r\n        begin: '\"\"\"',\r\n        end: '\"\"\"',\r\n        relevance: 10\r\n      },\r\n      {\r\n        begin: '\"',\r\n        end: '\"'\r\n      },\r\n      {\r\n        begin: \"'\",\r\n        end: \"'\"\r\n      }\r\n    ]\r\n  };\r\n  const ARRAY = {\r\n    begin: /\\[/,\r\n    end: /\\]/,\r\n    contains: [\r\n      COMMENTS,\r\n      LITERALS,\r\n      VARIABLES,\r\n      STRINGS,\r\n      NUMBERS,\r\n      'self'\r\n    ],\r\n    relevance: 0\r\n  };\r\n\r\n  const BARE_KEY = /[A-Za-z0-9_-]+/;\r\n  const QUOTED_KEY_DOUBLE_QUOTE = /\"(\\\\\"|[^\"])*\"/;\r\n  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\r\n  const ANY_KEY = regex.either(\r\n    BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE\r\n  );\r\n  const DOTTED_KEY = regex.concat(\r\n    ANY_KEY, '(\\\\s*\\\\.\\\\s*', ANY_KEY, ')*',\r\n    regex.lookahead(/\\s*=\\s*[^#\\s]/)\r\n  );\r\n\r\n  return {\r\n    name: 'TOML, also INI',\r\n    aliases: [ 'toml' ],\r\n    case_insensitive: true,\r\n    illegal: /\\S/,\r\n    contains: [\r\n      COMMENTS,\r\n      {\r\n        className: 'section',\r\n        begin: /\\[+/,\r\n        end: /\\]+/\r\n      },\r\n      {\r\n        begin: DOTTED_KEY,\r\n        className: 'attr',\r\n        starts: {\r\n          end: /$/,\r\n          contains: [\r\n            COMMENTS,\r\n            ARRAY,\r\n            LITERALS,\r\n            VARIABLES,\r\n            STRINGS,\r\n            NUMBERS\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  };\r\n}\r\n"],"names":["ini","hljs","regex","NUMBERS","className","relevance","variants","begin","NUMBER_RE","COMMENTS","COMMENT","end","VARIABLES","LITERALS","STRINGS","contains","BACKSLASH_ESCAPE","ARRAY","ANY_KEY","either","name","aliases","case_insensitive","illegal","concat","lookahead","starts"],"mappings":"AAQe,SAAQA,EAACC,GACtB,MAAMC,EAAQD,EAAKC,MACbC,EAAU,CACdC,UAAW,SACXC,UAAW,EACXC,SAAU,CACR,CAAEC,MAAO,wBACT,CAAEA,MAAON,EAAKO,aAGZC,EAAWR,EAAKS,UACtBD,EAASH,SAAW,CAClB,CACEC,MAAO,IACPI,IAAK,KAEP,CACEJ,MAAO,IACPI,IAAK,MAGT,MAAMC,EAAY,CAChBR,UAAW,WACXE,SAAU,CACR,CAAEC,MAAO,qBACT,CAAEA,MAAO,iBAGPM,EAAW,CACfT,UAAW,UACXG,MAAO,gCAEHO,EAAU,CACdV,UAAW,SACXW,SAAU,CAAEd,EAAKe,kBACjBV,SAAU,CACR,CACEC,MAAO,MACPI,IAAK,MACLN,UAAW,IAEb,CACEE,MAAO,MACPI,IAAK,MACLN,UAAW,IAEb,CACEE,MAAO,IACPI,IAAK,KAEP,CACEJ,MAAO,IACPI,IAAK,OAILM,EAAQ,CACZV,MAAO,KACPI,IAAK,KACLI,SAAU,CACRN,EACAI,EACAD,EACAE,EACAX,EACA,QAEFE,UAAW,GAMPa,EAAUhB,EAAMiB,OAHL,iBACe,gBACA,WAShC,MAAO,CACLC,KAAM,iBACNC,QAAS,CAAE,QACXC,kBAAkB,EAClBC,QAAS,KACTR,SAAU,CACRN,EACA,CACEL,UAAW,UACXG,MAAO,MACPI,IAAK,OAEP,CACEJ,MAlBaL,EAAMsB,OACvBN,EAAS,eAAgBA,EAAS,KAClChB,EAAMuB,UAAU,kBAiBZrB,UAAW,OACXsB,OAAQ,CACNf,IAAK,IACLI,SAAU,CACRN,EACAQ,EACAJ,EACAD,EACAE,EACAX,MAMZ"}