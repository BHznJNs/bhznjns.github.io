{"version":3,"file":"less.min.js","sources":["../../src/libs/highlight-es/languages/less.js"],"sourcesContent":["/*\r\nLanguage: Less\r\nDescription: It's CSS, with just a little more.\r\nAuthor:   Max Mikhailov <seven.phases.max@gmail.com>\r\nWebsite: http://lesscss.org\r\nCategory: common, css, web\r\n*/\r\n\r\nimport * as css from \"./lib/css-shared.js\";\r\n\r\n/** @type LanguageFn */\r\nexport default function(hljs) {\r\n  const modes = css.MODES(hljs);\r\n  const PSEUDO_SELECTORS = css.PSEUDO_SELECTORS;\r\n\r\n  const AT_MODIFIERS = \"and or not only\";\r\n  const IDENT_RE = '[\\\\w-]+'; // yes, Less identifiers may begin with a digit\r\n  const INTERP_IDENT_RE = '(' + IDENT_RE + '|@\\\\{' + IDENT_RE + '\\\\})';\r\n\r\n  /* Generic Modes */\r\n\r\n  const RULES = []; const VALUE_MODES = []; // forward def. for recursive modes\r\n\r\n  const STRING_MODE = function(c) {\r\n    return {\r\n    // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\r\n      className: 'string',\r\n      begin: '~?' + c + '.*?' + c\r\n    };\r\n  };\r\n\r\n  const IDENT_MODE = function(name, begin, relevance) {\r\n    return {\r\n      className: name,\r\n      begin: begin,\r\n      relevance: relevance\r\n    };\r\n  };\r\n\r\n  const AT_KEYWORDS = {\r\n    $pattern: /[a-z-]+/,\r\n    keyword: AT_MODIFIERS,\r\n    attribute: css.MEDIA_FEATURES.join(\" \")\r\n  };\r\n\r\n  const PARENS_MODE = {\r\n    // used only to properly balance nested parens inside mixin call, def. arg list\r\n    begin: '\\\\(',\r\n    end: '\\\\)',\r\n    contains: VALUE_MODES,\r\n    keywords: AT_KEYWORDS,\r\n    relevance: 0\r\n  };\r\n\r\n  // generic Less highlighter (used almost everywhere except selectors):\r\n  VALUE_MODES.push(\r\n    hljs.C_LINE_COMMENT_MODE,\r\n    hljs.C_BLOCK_COMMENT_MODE,\r\n    STRING_MODE(\"'\"),\r\n    STRING_MODE('\"'),\r\n    modes.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(\r\n    {\r\n      begin: '(url|data-uri)\\\\(',\r\n      starts: {\r\n        className: 'string',\r\n        end: '[\\\\)\\\\n]',\r\n        excludeEnd: true\r\n      }\r\n    },\r\n    modes.HEXCOLOR,\r\n    PARENS_MODE,\r\n    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),\r\n    IDENT_MODE('variable', '@\\\\{' + IDENT_RE + '\\\\}'),\r\n    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string\r\n    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):\r\n      className: 'attribute',\r\n      begin: IDENT_RE + '\\\\s*:',\r\n      end: ':',\r\n      returnBegin: true,\r\n      excludeEnd: true\r\n    },\r\n    modes.IMPORTANT,\r\n    { beginKeywords: 'and not' },\r\n    modes.FUNCTION_DISPATCH\r\n  );\r\n\r\n  const VALUE_WITH_RULESETS = VALUE_MODES.concat({\r\n    begin: /\\{/,\r\n    end: /\\}/,\r\n    contains: RULES\r\n  });\r\n\r\n  const MIXIN_GUARD_MODE = {\r\n    beginKeywords: 'when',\r\n    endsWithParent: true,\r\n    contains: [ { beginKeywords: 'and not' } ].concat(VALUE_MODES) // using this form to override VALUE’s 'function' match\r\n  };\r\n\r\n  /* Rule-Level Modes */\r\n\r\n  const RULE_MODE = {\r\n    begin: INTERP_IDENT_RE + '\\\\s*:',\r\n    returnBegin: true,\r\n    end: /[;}]/,\r\n    relevance: 0,\r\n    contains: [\r\n      { begin: /-(webkit|moz|ms|o)-/ },\r\n      modes.CSS_VARIABLE,\r\n      {\r\n        className: 'attribute',\r\n        begin: '\\\\b(' + css.ATTRIBUTES.join('|') + ')\\\\b',\r\n        end: /(?=:)/,\r\n        starts: {\r\n          endsWithParent: true,\r\n          illegal: '[<=$]',\r\n          relevance: 0,\r\n          contains: VALUE_MODES\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  const AT_RULE_MODE = {\r\n    className: 'keyword',\r\n    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b',\r\n    starts: {\r\n      end: '[;{}]',\r\n      keywords: AT_KEYWORDS,\r\n      returnEnd: true,\r\n      contains: VALUE_MODES,\r\n      relevance: 0\r\n    }\r\n  };\r\n\r\n  // variable definitions and calls\r\n  const VAR_RULE_MODE = {\r\n    className: 'variable',\r\n    variants: [\r\n      // using more strict pattern for higher relevance to increase chances of Less detection.\r\n      // this is *the only* Less specific statement used in most of the sources, so...\r\n      // (we’ll still often loose to the css-parser unless there's '//' comment,\r\n      // simply because 1 variable just can't beat 99 properties :)\r\n      {\r\n        begin: '@' + IDENT_RE + '\\\\s*:',\r\n        relevance: 15\r\n      },\r\n      { begin: '@' + IDENT_RE }\r\n    ],\r\n    starts: {\r\n      end: '[;}]',\r\n      returnEnd: true,\r\n      contains: VALUE_WITH_RULESETS\r\n    }\r\n  };\r\n\r\n  const SELECTOR_MODE = {\r\n    // first parse unambiguous selectors (i.e. those not starting with tag)\r\n    // then fall into the scary lookahead-discriminator variant.\r\n    // this mode also handles mixin definitions and calls\r\n    variants: [\r\n      {\r\n        begin: '[\\\\.#:&\\\\[>]',\r\n        end: '[;{}]' // mixin calls end with ';'\r\n      },\r\n      {\r\n        begin: INTERP_IDENT_RE,\r\n        end: /\\{/\r\n      }\r\n    ],\r\n    returnBegin: true,\r\n    returnEnd: true,\r\n    illegal: '[<=\\'$\"]',\r\n    relevance: 0,\r\n    contains: [\r\n      hljs.C_LINE_COMMENT_MODE,\r\n      hljs.C_BLOCK_COMMENT_MODE,\r\n      MIXIN_GUARD_MODE,\r\n      IDENT_MODE('keyword', 'all\\\\b'),\r\n      IDENT_MODE('variable', '@\\\\{' + IDENT_RE + '\\\\}'), // otherwise it’s identified as tag\r\n      \r\n      {\r\n        begin: '\\\\b(' + css.TAGS.join('|') + ')\\\\b',\r\n        className: 'selector-tag'\r\n      },\r\n      modes.CSS_NUMBER_MODE,\r\n      IDENT_MODE('selector-tag', INTERP_IDENT_RE, 0),\r\n      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),\r\n      IDENT_MODE('selector-class', '\\\\.' + INTERP_IDENT_RE, 0),\r\n      IDENT_MODE('selector-tag', '&', 0),\r\n      modes.ATTRIBUTE_SELECTOR_MODE,\r\n      {\r\n        className: 'selector-pseudo',\r\n        begin: ':(' + css.PSEUDO_CLASSES.join('|') + ')'\r\n      },\r\n      {\r\n        className: 'selector-pseudo',\r\n        begin: ':(:)?(' + css.PSEUDO_ELEMENTS.join('|') + ')'\r\n      },\r\n      {\r\n        begin: /\\(/,\r\n        end: /\\)/,\r\n        relevance: 0,\r\n        contains: VALUE_WITH_RULESETS\r\n      }, // argument list of parametric mixins\r\n      { begin: '!important' }, // eat !important after mixin call or it will be colored as tag\r\n      modes.FUNCTION_DISPATCH\r\n    ]\r\n  };\r\n\r\n  const PSEUDO_SELECTOR_MODE = {\r\n    begin: IDENT_RE + ':(:)?' + `(${PSEUDO_SELECTORS.join('|')})`,\r\n    returnBegin: true,\r\n    contains: [ SELECTOR_MODE ]\r\n  };\r\n\r\n  RULES.push(\r\n    hljs.C_LINE_COMMENT_MODE,\r\n    hljs.C_BLOCK_COMMENT_MODE,\r\n    AT_RULE_MODE,\r\n    VAR_RULE_MODE,\r\n    PSEUDO_SELECTOR_MODE,\r\n    RULE_MODE,\r\n    SELECTOR_MODE,\r\n    MIXIN_GUARD_MODE,\r\n    modes.FUNCTION_DISPATCH\r\n  );\r\n\r\n  return {\r\n    name: 'Less',\r\n    case_insensitive: true,\r\n    illegal: '[=>\\'/<($\"]',\r\n    contains: RULES\r\n  };\r\n}\r\n"],"names":["less","hljs","modes","css.MODES","PSEUDO_SELECTORS","css.PSEUDO_SELECTORS","IDENT_RE","INTERP_IDENT_RE","RULES","VALUE_MODES","STRING_MODE","c","className","begin","IDENT_MODE","name","relevance","AT_KEYWORDS","$pattern","keyword","attribute","css.MEDIA_FEATURES","join","PARENS_MODE","end","contains","keywords","push","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","CSS_NUMBER_MODE","starts","excludeEnd","HEXCOLOR","returnBegin","IMPORTANT","beginKeywords","FUNCTION_DISPATCH","VALUE_WITH_RULESETS","concat","MIXIN_GUARD_MODE","endsWithParent","RULE_MODE","CSS_VARIABLE","css.ATTRIBUTES","illegal","AT_RULE_MODE","returnEnd","VAR_RULE_MODE","variants","SELECTOR_MODE","css.TAGS","ATTRIBUTE_SELECTOR_MODE","css.PSEUDO_CLASSES","css.PSEUDO_ELEMENTS","PSEUDO_SELECTOR_MODE","case_insensitive"],"mappings":"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"}