{"version":3,"file":"typescript.min.js","sources":["../../src/libs/highlight-es/languages/typescript.js"],"sourcesContent":["/*\r\nLanguage: TypeScript\r\nAuthor: Panu Horsmalahti <panu.horsmalahti@iki.fi>\r\nContributors: Ike Ku <dempfi@yahoo.com>\r\nDescription: TypeScript is a strict superset of JavaScript\r\nWebsite: https://www.typescriptlang.org\r\nCategory: common, scripting\r\n*/\r\n\r\nimport * as ECMAScript from \"./lib/ecmascript.js\";\r\nimport javascript from \"./javascript.js\";\r\n\r\n/** @type LanguageFn */\r\nexport default function(hljs) {\r\n  const tsLanguage = javascript(hljs);\r\n\r\n  const IDENT_RE = ECMAScript.IDENT_RE;\r\n  const TYPES = [\r\n    \"any\",\r\n    \"void\",\r\n    \"number\",\r\n    \"boolean\",\r\n    \"string\",\r\n    \"object\",\r\n    \"never\",\r\n    \"symbol\",\r\n    \"bigint\",\r\n    \"unknown\"\r\n  ];\r\n  const NAMESPACE = {\r\n    beginKeywords: 'namespace',\r\n    end: /\\{/,\r\n    excludeEnd: true,\r\n    contains: [ tsLanguage.exports.CLASS_REFERENCE ]\r\n  };\r\n  const INTERFACE = {\r\n    beginKeywords: 'interface',\r\n    end: /\\{/,\r\n    excludeEnd: true,\r\n    keywords: {\r\n      keyword: 'interface extends',\r\n      built_in: TYPES\r\n    },\r\n    contains: [ tsLanguage.exports.CLASS_REFERENCE ]\r\n  };\r\n  const USE_STRICT = {\r\n    className: 'meta',\r\n    relevance: 10,\r\n    begin: /^\\s*['\"]use strict['\"]/\r\n  };\r\n  const TS_SPECIFIC_KEYWORDS = [\r\n    \"type\",\r\n    \"namespace\",\r\n    \"interface\",\r\n    \"public\",\r\n    \"private\",\r\n    \"protected\",\r\n    \"implements\",\r\n    \"declare\",\r\n    \"abstract\",\r\n    \"readonly\",\r\n    \"enum\",\r\n    \"override\"\r\n  ];\r\n  const KEYWORDS = {\r\n    $pattern: ECMAScript.IDENT_RE,\r\n    keyword: ECMAScript.KEYWORDS.concat(TS_SPECIFIC_KEYWORDS),\r\n    literal: ECMAScript.LITERALS,\r\n    built_in: ECMAScript.BUILT_INS.concat(TYPES),\r\n    \"variable.language\": ECMAScript.BUILT_IN_VARIABLES\r\n  };\r\n  const DECORATOR = {\r\n    className: 'meta',\r\n    begin: '@' + IDENT_RE,\r\n  };\r\n\r\n  const swapMode = (mode, label, replacement) => {\r\n    const indx = mode.contains.findIndex(m => m.label === label);\r\n    if (indx === -1) { throw new Error(\"can not find mode to replace\"); }\r\n\r\n    mode.contains.splice(indx, 1, replacement);\r\n  };\r\n\r\n\r\n  // this should update anywhere keywords is used since\r\n  // it will be the same actual JS object\r\n  Object.assign(tsLanguage.keywords, KEYWORDS);\r\n\r\n  tsLanguage.exports.PARAMS_CONTAINS.push(DECORATOR);\r\n\r\n  // highlight the function params\r\n  const ATTRIBUTE_HIGHLIGHT = tsLanguage.contains.find(c => c.className === \"attr\");\r\n  tsLanguage.exports.PARAMS_CONTAINS.push([\r\n    tsLanguage.exports.CLASS_REFERENCE, // class reference for highlighting the params types\r\n    ATTRIBUTE_HIGHLIGHT, // highlight the params key\r\n  ]);\r\n  tsLanguage.contains = tsLanguage.contains.concat([\r\n    DECORATOR,\r\n    NAMESPACE,\r\n    INTERFACE,\r\n  ]);\r\n\r\n  // TS gets a simpler shebang rule than JS\r\n  swapMode(tsLanguage, \"shebang\", hljs.SHEBANG());\r\n  // JS use strict rule purposely excludes `asm` which makes no sense\r\n  swapMode(tsLanguage, \"use_strict\", USE_STRICT);\r\n\r\n  const functionDeclaration = tsLanguage.contains.find(m => m.label === \"func.def\");\r\n  functionDeclaration.relevance = 0; // () => {} is more typical in TypeScript\r\n\r\n  Object.assign(tsLanguage, {\r\n    name: 'TypeScript',\r\n    aliases: [\r\n      'ts',\r\n      'tsx',\r\n      'mts',\r\n      'cts'\r\n    ]\r\n  });\r\n\r\n  return tsLanguage;\r\n}\r\n"],"names":["typescript","hljs","tsLanguage","javascript","IDENT_RE","ECMAScript.IDENT_RE","TYPES","NAMESPACE","beginKeywords","end","excludeEnd","contains","exports","CLASS_REFERENCE","INTERFACE","keywords","keyword","built_in","KEYWORDS","$pattern","ECMAScript.KEYWORDS","concat","literal","ECMAScript.LITERALS","ECMAScript.BUILT_INS","ECMAScript.BUILT_IN_VARIABLES","DECORATOR","className","begin","swapMode","mode","label","replacement","indx","findIndex","m","Error","splice","Object","assign","PARAMS_CONTAINS","push","ATTRIBUTE_HIGHLIGHT","find","c","SHEBANG","relevance","name","aliases"],"mappings":"2EAae,SAAQA,EAACC,GACtB,MAAMC,EAAaC,EAAWF,GAExBG,EAAWC,EACXC,EAAQ,CACZ,MACA,OACA,SACA,UACA,SACA,SACA,QACA,SACA,SACA,WAEIC,EAAY,CAChBC,cAAe,YACfC,IAAK,KACLC,YAAY,EACZC,SAAU,CAAET,EAAWU,QAAQC,kBAE3BC,EAAY,CAChBN,cAAe,YACfC,IAAK,KACLC,YAAY,EACZK,SAAU,CACRC,QAAS,oBACTC,SAAUX,GAEZK,SAAU,CAAET,EAAWU,QAAQC,kBAqB3BK,EAAW,CACfC,SAAUd,EACVW,QAASI,EAAoBC,OAhBF,CAC3B,OACA,YACA,YACA,SACA,UACA,YACA,aACA,UACA,WACA,WACA,OACA,aAKAC,QAASC,EACTN,SAAUO,EAAqBH,OAAOf,GACtC,oBAAqBmB,GAEjBC,EAAY,CAChBC,UAAW,OACXC,MAAO,IAAMxB,GAGTyB,EAAW,CAACC,EAAMC,EAAOC,KAC7B,MAAMC,EAAOH,EAAKnB,SAASuB,WAAUC,GAAKA,EAAEJ,QAAUA,IACtD,IAAc,IAAVE,EAAe,MAAM,IAAIG,MAAM,gCAEnCN,EAAKnB,SAAS0B,OAAOJ,EAAM,EAAGD,EAAY,EAM5CM,OAAOC,OAAOrC,EAAWa,SAAUG,GAEnChB,EAAWU,QAAQ4B,gBAAgBC,KAAKf,GAGxC,MAAMgB,EAAsBxC,EAAWS,SAASgC,MAAKC,GAAqB,SAAhBA,EAAEjB,YAC5DzB,EAAWU,QAAQ4B,gBAAgBC,KAAK,CACtCvC,EAAWU,QAAQC,gBACnB6B,IAEFxC,EAAWS,SAAWT,EAAWS,SAASU,OAAO,CAC/CK,EACAnB,EACAO,IAIFe,EAAS3B,EAAY,UAAWD,EAAK4C,WAErChB,EAAS3B,EAAY,aA5DF,CACjByB,UAAW,OACXmB,UAAW,GACXlB,MAAO,2BAwET,OAb4B1B,EAAWS,SAASgC,MAAKR,GAAiB,aAAZA,EAAEJ,QACxCe,UAAY,EAEhCR,OAAOC,OAAOrC,EAAY,CACxB6C,KAAM,aACNC,QAAS,CACP,KACA,MACA,MACA,SAIG9C,CACT"}