{"version":3,"file":"llvm.min.js","sources":["../../src/libs/highlight-es/languages/llvm.js"],"sourcesContent":["/*\r\nLanguage: LLVM IR\r\nAuthor: Michael Rodler <contact@f0rki.at>\r\nDescription: language used as intermediate representation in the LLVM compiler framework\r\nWebsite: https://llvm.org/docs/LangRef.html\r\nCategory: assembler\r\nAudit: 2020\r\n*/\r\n\r\n/** @type LanguageFn */\r\nexport default function(hljs) {\r\n  const regex = hljs.regex;\r\n  const IDENT_RE = /([-a-zA-Z$._][\\w$.-]*)/;\r\n  const TYPE = {\r\n    className: 'type',\r\n    begin: /\\bi\\d+(?=\\s|\\b)/\r\n  };\r\n  const OPERATOR = {\r\n    className: 'operator',\r\n    relevance: 0,\r\n    begin: /=/\r\n  };\r\n  const PUNCTUATION = {\r\n    className: 'punctuation',\r\n    relevance: 0,\r\n    begin: /,/\r\n  };\r\n  const NUMBER = {\r\n    className: 'number',\r\n    variants: [\r\n      { begin: /[su]?0[xX][KMLHR]?[a-fA-F0-9]+/ },\r\n      { begin: /[-+]?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?/ }\r\n    ],\r\n    relevance: 0\r\n  };\r\n  const LABEL = {\r\n    className: 'symbol',\r\n    variants: [ { begin: /^\\s*[a-z]+:/ }, // labels\r\n    ],\r\n    relevance: 0\r\n  };\r\n  const VARIABLE = {\r\n    className: 'variable',\r\n    variants: [\r\n      { begin: regex.concat(/%/, IDENT_RE) },\r\n      { begin: /%\\d+/ },\r\n      { begin: /#\\d+/ },\r\n    ]\r\n  };\r\n  const FUNCTION = {\r\n    className: 'title',\r\n    variants: [\r\n      { begin: regex.concat(/@/, IDENT_RE) },\r\n      { begin: /@\\d+/ },\r\n      { begin: regex.concat(/!/, IDENT_RE) },\r\n      { begin: regex.concat(/!\\d+/, IDENT_RE) },\r\n      // https://llvm.org/docs/LangRef.html#namedmetadatastructure\r\n      // obviously a single digit can also be used in this fashion\r\n      { begin: /!\\d+/ }\r\n    ]\r\n  };\r\n\r\n  return {\r\n    name: 'LLVM IR',\r\n    // TODO: split into different categories of keywords\r\n    keywords:\r\n      'begin end true false declare define global '\r\n      + 'constant private linker_private internal '\r\n      + 'available_externally linkonce linkonce_odr weak '\r\n      + 'weak_odr appending dllimport dllexport common '\r\n      + 'default hidden protected extern_weak external '\r\n      + 'thread_local zeroinitializer undef null to tail '\r\n      + 'target triple datalayout volatile nuw nsw nnan '\r\n      + 'ninf nsz arcp fast exact inbounds align '\r\n      + 'addrspace section alias module asm sideeffect '\r\n      + 'gc dbg linker_private_weak attributes blockaddress '\r\n      + 'initialexec localdynamic localexec prefix unnamed_addr '\r\n      + 'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc '\r\n      + 'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device '\r\n      + 'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func '\r\n      + 'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc '\r\n      + 'cc c signext zeroext inreg sret nounwind '\r\n      + 'noreturn noalias nocapture byval nest readnone '\r\n      + 'readonly inlinehint noinline alwaysinline optsize ssp '\r\n      + 'sspreq noredzone noimplicitfloat naked builtin cold '\r\n      + 'nobuiltin noduplicate nonlazybind optnone returns_twice '\r\n      + 'sanitize_address sanitize_memory sanitize_thread sspstrong '\r\n      + 'uwtable returned type opaque eq ne slt sgt '\r\n      + 'sle sge ult ugt ule uge oeq one olt ogt '\r\n      + 'ole oge ord uno ueq une x acq_rel acquire '\r\n      + 'alignstack atomic catch cleanup filter inteldialect '\r\n      + 'max min monotonic nand personality release seq_cst '\r\n      + 'singlethread umax umin unordered xchg add fadd '\r\n      + 'sub fsub mul fmul udiv sdiv fdiv urem srem '\r\n      + 'frem shl lshr ashr and or xor icmp fcmp '\r\n      + 'phi call trunc zext sext fptrunc fpext uitofp '\r\n      + 'sitofp fptoui fptosi inttoptr ptrtoint bitcast '\r\n      + 'addrspacecast select va_arg ret br switch invoke '\r\n      + 'unwind unreachable indirectbr landingpad resume '\r\n      + 'malloc alloca free load store getelementptr '\r\n      + 'extractelement insertelement shufflevector getresult '\r\n      + 'extractvalue insertvalue atomicrmw cmpxchg fence '\r\n      + 'argmemonly double',\r\n    contains: [\r\n      TYPE,\r\n      // this matches \"empty comments\"...\r\n      // ...because it's far more likely this is a statement terminator in\r\n      // another language than an actual comment\r\n      hljs.COMMENT(/;\\s*$/, null, { relevance: 0 }),\r\n      hljs.COMMENT(/;/, /$/),\r\n      {\r\n        className: 'string',\r\n        begin: /\"/,\r\n        end: /\"/,\r\n        contains: [\r\n          {\r\n            className: 'char.escape',\r\n            match: /\\\\\\d\\d/\r\n          }\r\n        ]\r\n      },\r\n      FUNCTION,\r\n      PUNCTUATION,\r\n      OPERATOR,\r\n      VARIABLE,\r\n      LABEL,\r\n      NUMBER\r\n    ]\r\n  };\r\n}\r\n"],"names":["llvm","hljs","regex","IDENT_RE","VARIABLE","className","variants","begin","concat","FUNCTION","name","keywords","contains","COMMENT","relevance","end","match"],"mappings":"AAUe,SAAQA,EAACC,GACtB,MAAMC,EAAQD,EAAKC,MACbC,EAAW,yBA6BXC,EAAW,CACfC,UAAW,WACXC,SAAU,CACR,CAAEC,MAAOL,EAAMM,OAAO,IAAKL,IAC3B,CAAEI,MAAO,QACT,CAAEA,MAAO,UAGPE,EAAW,CACfJ,UAAW,QACXC,SAAU,CACR,CAAEC,MAAOL,EAAMM,OAAO,IAAKL,IAC3B,CAAEI,MAAO,QACT,CAAEA,MAAOL,EAAMM,OAAO,IAAKL,IAC3B,CAAEI,MAAOL,EAAMM,OAAO,OAAQL,IAG9B,CAAEI,MAAO,UAIb,MAAO,CACLG,KAAM,UAENC,SACE,ysDAqCFC,SAAU,CA1FC,CACXP,UAAW,OACXE,MAAO,mBA6FLN,EAAKY,QAAQ,QAAS,KAAM,CAAEC,UAAW,IACzCb,EAAKY,QAAQ,IAAK,KAClB,CACER,UAAW,SACXE,MAAO,IACPQ,IAAK,IACLH,SAAU,CACR,CACEP,UAAW,cACXW,MAAO,YAIbP,EAnGgB,CAClBJ,UAAW,cACXS,UAAW,EACXP,MAAO,KARQ,CACfF,UAAW,WACXS,UAAW,EACXP,MAAO,KAwGLH,EAzFU,CACZC,UAAW,SACXC,SAAU,CAAE,CAAEC,MAAO,gBAErBO,UAAW,GAZE,CACbT,UAAW,SACXC,SAAU,CACR,CAAEC,MAAO,kCACT,CAAEA,MAAO,oDAEXO,UAAW,IAgGf"}