{"version":3,"file":"markdown.min.js","sources":["../../src/libs/highlight-es/languages/markdown.js"],"sourcesContent":["/*\r\nLanguage: Markdown\r\nRequires: xml.js\r\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\r\nWebsite: https://daringfireball.net/projects/markdown/\r\nCategory: common, markup\r\n*/\r\n\r\nexport default function(hljs) {\r\n  const regex = hljs.regex;\r\n  const INLINE_HTML = {\r\n    begin: /<\\/?[A-Za-z_]/,\r\n    end: '>',\r\n    subLanguage: 'xml',\r\n    relevance: 0\r\n  };\r\n  const HORIZONTAL_RULE = {\r\n    begin: '^[-\\\\*]{3,}',\r\n    end: '$'\r\n  };\r\n  const CODE = {\r\n    className: 'code',\r\n    variants: [\r\n      // TODO: fix to allow these to work with sublanguage also\r\n      { begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*' },\r\n      { begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*' },\r\n      // needed to allow markdown as a sublanguage to work\r\n      {\r\n        begin: '```',\r\n        end: '```+[ ]*$'\r\n      },\r\n      {\r\n        begin: '~~~',\r\n        end: '~~~+[ ]*$'\r\n      },\r\n      { begin: '`.+?`' },\r\n      {\r\n        begin: '(?=^( {4}|\\\\t))',\r\n        // use contains to gobble up multiple lines to allow the block to be whatever size\r\n        // but only have a single open/close tag vs one per line\r\n        contains: [\r\n          {\r\n            begin: '^( {4}|\\\\t)',\r\n            end: '(\\\\n)$'\r\n          }\r\n        ],\r\n        relevance: 0\r\n      }\r\n    ]\r\n  };\r\n  const LIST = {\r\n    className: 'bullet',\r\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\r\n    end: '\\\\s+',\r\n    excludeEnd: true\r\n  };\r\n  const LINK_REFERENCE = {\r\n    begin: /^\\[[^\\n]+\\]:/,\r\n    returnBegin: true,\r\n    contains: [\r\n      {\r\n        className: 'symbol',\r\n        begin: /\\[/,\r\n        end: /\\]/,\r\n        excludeBegin: true,\r\n        excludeEnd: true\r\n      },\r\n      {\r\n        className: 'link',\r\n        begin: /:\\s*/,\r\n        end: /$/,\r\n        excludeBegin: true\r\n      }\r\n    ]\r\n  };\r\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\r\n  const LINK = {\r\n    variants: [\r\n      // too much like nested array access in so many languages\r\n      // to have any real relevance\r\n      {\r\n        begin: /\\[.+?\\]\\[.*?\\]/,\r\n        relevance: 0\r\n      },\r\n      // popular internet URLs\r\n      {\r\n        begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\r\n        relevance: 2\r\n      },\r\n      {\r\n        begin: regex.concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\r\n        relevance: 2\r\n      },\r\n      // relative urls\r\n      {\r\n        begin: /\\[.+?\\]\\([./?&#].*?\\)/,\r\n        relevance: 1\r\n      },\r\n      // whatever else, lower relevance (might not be a link at all)\r\n      {\r\n        begin: /\\[.*?\\]\\(.*?\\)/,\r\n        relevance: 0\r\n      }\r\n    ],\r\n    returnBegin: true,\r\n    contains: [\r\n      {\r\n        // empty strings for alt or link text\r\n        match: /\\[(?=\\])/ },\r\n      {\r\n        className: 'string',\r\n        relevance: 0,\r\n        begin: '\\\\[',\r\n        end: '\\\\]',\r\n        excludeBegin: true,\r\n        returnEnd: true\r\n      },\r\n      {\r\n        className: 'link',\r\n        relevance: 0,\r\n        begin: '\\\\]\\\\(',\r\n        end: '\\\\)',\r\n        excludeBegin: true,\r\n        excludeEnd: true\r\n      },\r\n      {\r\n        className: 'symbol',\r\n        relevance: 0,\r\n        begin: '\\\\]\\\\[',\r\n        end: '\\\\]',\r\n        excludeBegin: true,\r\n        excludeEnd: true\r\n      }\r\n    ]\r\n  };\r\n  const BOLD = {\r\n    className: 'strong',\r\n    contains: [], // defined later\r\n    variants: [\r\n      {\r\n        begin: /_{2}(?!\\s)/,\r\n        end: /_{2}/\r\n      },\r\n      {\r\n        begin: /\\*{2}(?!\\s)/,\r\n        end: /\\*{2}/\r\n      }\r\n    ]\r\n  };\r\n  const ITALIC = {\r\n    className: 'emphasis',\r\n    contains: [], // defined later\r\n    variants: [\r\n      {\r\n        begin: /\\*(?![*\\s])/,\r\n        end: /\\*/\r\n      },\r\n      {\r\n        begin: /_(?![_\\s])/,\r\n        end: /_/,\r\n        relevance: 0\r\n      }\r\n    ]\r\n  };\r\n\r\n  // 3 level deep nesting is not allowed because it would create confusion\r\n  // in cases like `***testing***` because where we don't know if the last\r\n  // `***` is starting a new bold/italic or finishing the last one\r\n  const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, { contains: [] });\r\n  const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, { contains: [] });\r\n  BOLD.contains.push(ITALIC_WITHOUT_BOLD);\r\n  ITALIC.contains.push(BOLD_WITHOUT_ITALIC);\r\n\r\n  let CONTAINABLE = [\r\n    INLINE_HTML,\r\n    LINK\r\n  ];\r\n\r\n  [\r\n    BOLD,\r\n    ITALIC,\r\n    BOLD_WITHOUT_ITALIC,\r\n    ITALIC_WITHOUT_BOLD\r\n  ].forEach(m => {\r\n    m.contains = m.contains.concat(CONTAINABLE);\r\n  });\r\n\r\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\r\n\r\n  const HEADER = {\r\n    className: 'section',\r\n    variants: [\r\n      {\r\n        begin: '^#{1,6}',\r\n        end: '$',\r\n        contains: CONTAINABLE\r\n      },\r\n      {\r\n        begin: '(?=^.+?\\\\n[=-]{2,}$)',\r\n        contains: [\r\n          { begin: '^[=-]*$' },\r\n          {\r\n            begin: '^',\r\n            end: \"\\\\n\",\r\n            contains: CONTAINABLE\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const BLOCKQUOTE = {\r\n    className: 'quote',\r\n    begin: '^>\\\\s+',\r\n    contains: CONTAINABLE,\r\n    end: '$'\r\n  };\r\n\r\n  return {\r\n    name: 'Markdown',\r\n    aliases: [\r\n      'md',\r\n      'mkdown',\r\n      'mkd'\r\n    ],\r\n    contains: [\r\n      HEADER,\r\n      INLINE_HTML,\r\n      LIST,\r\n      BOLD,\r\n      ITALIC,\r\n      BLOCKQUOTE,\r\n      CODE,\r\n      HORIZONTAL_RULE,\r\n      LINK,\r\n      LINK_REFERENCE\r\n    ]\r\n  };\r\n}\r\n"],"names":["markdown","hljs","INLINE_HTML","begin","end","subLanguage","relevance","LINK","variants","regex","concat","returnBegin","contains","match","className","excludeBegin","returnEnd","excludeEnd","BOLD","ITALIC","BOLD_WITHOUT_ITALIC","inherit","ITALIC_WITHOUT_BOLD","push","CONTAINABLE","forEach","m","name","aliases"],"mappings":"AAQe,SAAQA,EAACC,GACtB,MACMC,EAAc,CAClBC,MAAO,gBACPC,IAAK,IACLC,YAAa,MACbC,UAAW,GA8DPC,EAAO,CACXC,SAAU,CAGR,CACEL,MAAO,iBACPG,UAAW,GAGb,CACEH,MAAO,gEACPG,UAAW,GAEb,CACEH,MAjFQF,EAAKQ,MAiFAC,OAAO,YAfP,0BAegC,cAC7CJ,UAAW,GAGb,CACEH,MAAO,wBACPG,UAAW,GAGb,CACEH,MAAO,iBACPG,UAAW,IAGfK,aAAa,EACbC,SAAU,CACR,CAEEC,MAAO,YACT,CACEC,UAAW,SACXR,UAAW,EACXH,MAAO,MACPC,IAAK,MACLW,cAAc,EACdC,WAAW,GAEb,CACEF,UAAW,OACXR,UAAW,EACXH,MAAO,SACPC,IAAK,MACLW,cAAc,EACdE,YAAY,GAEd,CACEH,UAAW,SACXR,UAAW,EACXH,MAAO,SACPC,IAAK,MACLW,cAAc,EACdE,YAAY,KAIZC,EAAO,CACXJ,UAAW,SACXF,SAAU,GACVJ,SAAU,CACR,CACEL,MAAO,aACPC,IAAK,QAEP,CACED,MAAO,cACPC,IAAK,WAILe,EAAS,CACbL,UAAW,WACXF,SAAU,GACVJ,SAAU,CACR,CACEL,MAAO,cACPC,IAAK,MAEP,CACED,MAAO,aACPC,IAAK,IACLE,UAAW,KAQXc,EAAsBnB,EAAKoB,QAAQH,EAAM,CAAEN,SAAU,KACrDU,EAAsBrB,EAAKoB,QAAQF,EAAQ,CAAEP,SAAU,KAC7DM,EAAKN,SAASW,KAAKD,GACnBH,EAAOP,SAASW,KAAKH,GAErB,IAAII,EAAc,CAChBtB,EACAK,GAGF,CACEW,EACAC,EACAC,EACAE,GACAG,SAAQC,IACRA,EAAEd,SAAWc,EAAEd,SAASF,OAAOc,EAAY,IAG7CA,EAAcA,EAAYd,OAAOQ,EAAMC,GA+BvC,MAAO,CACLQ,KAAM,WACNC,QAAS,CACP,KACA,SACA,OAEFhB,SAAU,CApCG,CACbE,UAAW,UACXN,SAAU,CACR,CACEL,MAAO,UACPC,IAAK,IACLQ,SAAUY,GAEZ,CACErB,MAAO,uBACPS,SAAU,CACR,CAAET,MAAO,WACT,CACEA,MAAO,IACPC,IAAK,MACLQ,SAAUY,OAuBhBtB,EAjLS,CACXY,UAAW,SACXX,MAAO,mCACPC,IAAK,OACLa,YAAY,GA+KVC,EACAC,EAnBe,CACjBL,UAAW,QACXX,MAAO,SACPS,SAAUY,EACVpB,IAAK,KAnMM,CACXU,UAAW,OACXN,SAAU,CAER,CAAEL,MAAO,iCACT,CAAEA,MAAO,iCAET,CACEA,MAAO,MACPC,IAAK,aAEP,CACED,MAAO,MACPC,IAAK,aAEP,CAAED,MAAO,SACT,CACEA,MAAO,kBAGPS,SAAU,CACR,CACET,MAAO,cACPC,IAAK,WAGTE,UAAW,KA9BO,CACtBH,MAAO,cACPC,IAAK,KAwNHG,EAlLmB,CACrBJ,MAAO,eACPQ,aAAa,EACbC,SAAU,CACR,CACEE,UAAW,SACXX,MAAO,KACPC,IAAK,KACLW,cAAc,EACdE,YAAY,GAEd,CACEH,UAAW,OACXX,MAAO,OACPC,IAAK,IACLW,cAAc,MAuKtB"}