{"version":3,"file":"haskell.min.js","sources":["../../src/libs/highlight-es/languages/haskell.js"],"sourcesContent":["/*\r\nLanguage: Haskell\r\nAuthor: Jeremy Hull <sourdrums@gmail.com>\r\nContributors: Zena Treep <zena.treep@gmail.com>\r\nWebsite: https://www.haskell.org\r\nCategory: functional\r\n*/\r\n\r\nexport default function(hljs) {\r\n\r\n  /* See:\r\n     - https://www.haskell.org/onlinereport/lexemes.html\r\n     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/binary_literals.html\r\n     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/numeric_underscores.html\r\n     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/hex_float_literals.html\r\n  */\r\n  const decimalDigits = '([0-9]_*)+';\r\n  const hexDigits = '([0-9a-fA-F]_*)+';\r\n  const binaryDigits = '([01]_*)+';\r\n  const octalDigits = '([0-7]_*)+';\r\n  const ascSymbol = '[!#$%&*+.\\\\/<=>?@\\\\\\\\^~-]';\r\n  const uniSymbol = '(\\\\p{S}|\\\\p{P})' // Symbol or Punctuation\r\n  const special = '[(),;\\\\[\\\\]`|{}]';\r\n  const symbol = `(${ascSymbol}|(?!(${special}|[_:\"']))${uniSymbol})`;\r\n\r\n  const COMMENT = { variants: [\r\n    // Double dash forms a valid comment only if it's not part of legal lexeme.\r\n    // See: Haskell 98 report: https://www.haskell.org/onlinereport/lexemes.html\r\n    //\r\n    // The commented code does the job, but we can't use negative lookbehind,\r\n    // due to poor support by Safari browser.\r\n    // > hljs.COMMENT(`(?<!${symbol})--+(?!${symbol})`, '$'),\r\n    // So instead, we'll add a no-markup rule before the COMMENT rule in the rules list\r\n    // to match the problematic infix operators that contain double dash.\r\n    hljs.COMMENT('--+', '$'),\r\n    hljs.COMMENT(\r\n      /\\{-/,\r\n      /-\\}/,\r\n      { contains: [ 'self' ] }\r\n    )\r\n  ] };\r\n\r\n  const PRAGMA = {\r\n    className: 'meta',\r\n    begin: /\\{-#/,\r\n    end: /#-\\}/\r\n  };\r\n\r\n  const PREPROCESSOR = {\r\n    className: 'meta',\r\n    begin: '^#',\r\n    end: '$'\r\n  };\r\n\r\n  const CONSTRUCTOR = {\r\n    className: 'type',\r\n    begin: '\\\\b[A-Z][\\\\w\\']*', // TODO: other constructors (build-in, infix).\r\n    relevance: 0\r\n  };\r\n\r\n  const LIST = {\r\n    begin: '\\\\(',\r\n    end: '\\\\)',\r\n    illegal: '\"',\r\n    contains: [\r\n      PRAGMA,\r\n      PREPROCESSOR,\r\n      {\r\n        className: 'type',\r\n        begin: '\\\\b[A-Z][\\\\w]*(\\\\((\\\\.\\\\.|,|\\\\w+)\\\\))?'\r\n      },\r\n      hljs.inherit(hljs.TITLE_MODE, { begin: '[_a-z][\\\\w\\']*' }),\r\n      COMMENT\r\n    ]\r\n  };\r\n\r\n  const RECORD = {\r\n    begin: /\\{/,\r\n    end: /\\}/,\r\n    contains: LIST.contains\r\n  };\r\n\r\n  const NUMBER = {\r\n    className: 'number',\r\n    relevance: 0,\r\n    variants: [\r\n      // decimal floating-point-literal (subsumes decimal-literal)\r\n      { match: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b` },\r\n      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\r\n      { match: `\\\\b0[xX]_*(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b` },\r\n      // octal-literal\r\n      { match: `\\\\b0[oO](${octalDigits})\\\\b` },\r\n      // binary-literal\r\n      { match: `\\\\b0[bB](${binaryDigits})\\\\b` }\r\n    ]\r\n  };\r\n\r\n  return {\r\n    name: 'Haskell',\r\n    aliases: [ 'hs' ],\r\n    keywords:\r\n      'let in if then else case of where do module import hiding '\r\n      + 'qualified type data newtype deriving class instance as default '\r\n      + 'infix infixl infixr foreign export ccall stdcall cplusplus '\r\n      + 'jvm dotnet safe unsafe family forall mdo proc rec',\r\n    unicodeRegex: true,\r\n    contains: [\r\n      // Top-level constructions.\r\n      {\r\n        beginKeywords: 'module',\r\n        end: 'where',\r\n        keywords: 'module where',\r\n        contains: [\r\n          LIST,\r\n          COMMENT\r\n        ],\r\n        illegal: '\\\\W\\\\.|;'\r\n      },\r\n      {\r\n        begin: '\\\\bimport\\\\b',\r\n        end: '$',\r\n        keywords: 'import qualified as hiding',\r\n        contains: [\r\n          LIST,\r\n          COMMENT\r\n        ],\r\n        illegal: '\\\\W\\\\.|;'\r\n      },\r\n      {\r\n        className: 'class',\r\n        begin: '^(\\\\s*)?(class|instance)\\\\b',\r\n        end: 'where',\r\n        keywords: 'class family instance where',\r\n        contains: [\r\n          CONSTRUCTOR,\r\n          LIST,\r\n          COMMENT\r\n        ]\r\n      },\r\n      {\r\n        className: 'class',\r\n        begin: '\\\\b(data|(new)?type)\\\\b',\r\n        end: '$',\r\n        keywords: 'data family type newtype deriving',\r\n        contains: [\r\n          PRAGMA,\r\n          CONSTRUCTOR,\r\n          LIST,\r\n          RECORD,\r\n          COMMENT\r\n        ]\r\n      },\r\n      {\r\n        beginKeywords: 'default',\r\n        end: '$',\r\n        contains: [\r\n          CONSTRUCTOR,\r\n          LIST,\r\n          COMMENT\r\n        ]\r\n      },\r\n      {\r\n        beginKeywords: 'infix infixl infixr',\r\n        end: '$',\r\n        contains: [\r\n          hljs.C_NUMBER_MODE,\r\n          COMMENT\r\n        ]\r\n      },\r\n      {\r\n        begin: '\\\\bforeign\\\\b',\r\n        end: '$',\r\n        keywords: 'foreign import export ccall stdcall cplusplus jvm '\r\n                  + 'dotnet safe unsafe',\r\n        contains: [\r\n          CONSTRUCTOR,\r\n          hljs.QUOTE_STRING_MODE,\r\n          COMMENT\r\n        ]\r\n      },\r\n      {\r\n        className: 'meta',\r\n        begin: '#!\\\\/usr\\\\/bin\\\\/env\\ runhaskell',\r\n        end: '$'\r\n      },\r\n      // \"Whitespaces\".\r\n      PRAGMA,\r\n      PREPROCESSOR,\r\n\r\n      // Literals and names.\r\n\r\n      // Single characters.\r\n      {\r\n        scope: 'string',\r\n        begin: /'(?=\\\\?.')/,\r\n        end: /'/,\r\n        contains: [\r\n          {\r\n            scope: 'char.escape',\r\n            match: /\\\\./,\r\n          },\r\n        ]\r\n      },\r\n      hljs.QUOTE_STRING_MODE,\r\n      NUMBER,\r\n      CONSTRUCTOR,\r\n      hljs.inherit(hljs.TITLE_MODE, { begin: '^[_a-z][\\\\w\\']*' }),\r\n      // No markup, prevents infix operators from being recognized as comments.\r\n      { begin: `(?!-)${symbol}--+|--+(?!-)${symbol}`},\r\n      COMMENT,\r\n      { // No markup, relevance booster\r\n        begin: '->|<-' }\r\n    ]\r\n  };\r\n}\r\n"],"names":["haskell","hljs","decimalDigits","hexDigits","symbol","COMMENT","variants","contains","PRAGMA","className","begin","end","PREPROCESSOR","CONSTRUCTOR","relevance","LIST","illegal","inherit","TITLE_MODE","NUMBER","match","name","aliases","keywords","unicodeRegex","beginKeywords","C_NUMBER_MODE","QUOTE_STRING_MODE","scope"],"mappings":"AAQe,SAAQA,EAACC,GAQtB,MAAMC,EAAgB,aAChBC,EAAY,mBAMZC,EAAS,4EAETC,EAAU,CAAEC,SAAU,CAS1BL,EAAKI,QAAQ,MAAO,KACpBJ,EAAKI,QACH,MACA,MACA,CAAEE,SAAU,CAAE,YAIZC,EAAS,CACbC,UAAW,OACXC,MAAO,OACPC,IAAK,QAGDC,EAAe,CACnBH,UAAW,OACXC,MAAO,KACPC,IAAK,KAGDE,EAAc,CAClBJ,UAAW,OACXC,MAAO,kBACPI,UAAW,GAGPC,EAAO,CACXL,MAAO,MACPC,IAAK,MACLK,QAAS,IACTT,SAAU,CACRC,EACAI,EACA,CACEH,UAAW,OACXC,MAAO,0CAETT,EAAKgB,QAAQhB,EAAKiB,WAAY,CAAER,MAAO,kBACvCL,IAUEc,EAAS,CACbV,UAAW,SACXK,UAAW,EACXR,SAAU,CAER,CAAEc,MAAO,OAAOlB,UAAsBA,kBAAmCA,WAEzE,CAAEkB,MAAO,cAAcjB,UAAkBA,kBAA+BD,WAExE,CAAEkB,MAAO,2BAET,CAAEA,MAAO,4BAIb,MAAO,CACLC,KAAM,UACNC,QAAS,CAAE,MACXC,SACE,wOAIFC,cAAc,EACdjB,SAAU,CAER,CACEkB,cAAe,SACfd,IAAK,QACLY,SAAU,eACVhB,SAAU,CACRQ,EACAV,GAEFW,QAAS,YAEX,CACEN,MAAO,eACPC,IAAK,IACLY,SAAU,6BACVhB,SAAU,CACRQ,EACAV,GAEFW,QAAS,YAEX,CACEP,UAAW,QACXC,MAAO,8BACPC,IAAK,QACLY,SAAU,8BACVhB,SAAU,CACRM,EACAE,EACAV,IAGJ,CACEI,UAAW,QACXC,MAAO,0BACPC,IAAK,IACLY,SAAU,oCACVhB,SAAU,CACRC,EACAK,EACAE,EAvEO,CACbL,MAAO,KACPC,IAAK,KACLJ,SAAUQ,EAAKR,UAsETF,IAGJ,CACEoB,cAAe,UACfd,IAAK,IACLJ,SAAU,CACRM,EACAE,EACAV,IAGJ,CACEoB,cAAe,sBACfd,IAAK,IACLJ,SAAU,CACRN,EAAKyB,cACLrB,IAGJ,CACEK,MAAO,gBACPC,IAAK,IACLY,SAAU,uEAEVhB,SAAU,CACRM,EACAZ,EAAK0B,kBACLtB,IAGJ,CACEI,UAAW,OACXC,MAAO,kCACPC,IAAK,KAGPH,EACAI,EAKA,CACEgB,MAAO,SACPlB,MAAO,aACPC,IAAK,IACLJ,SAAU,CACR,CACEqB,MAAO,cACPR,MAAO,SAIbnB,EAAK0B,kBACLR,EACAN,EACAZ,EAAKgB,QAAQhB,EAAKiB,WAAY,CAAER,MAAO,mBAEvC,CAAEA,MAAO,QAAQN,gBAAqBA,KACtCC,EACA,CACEK,MAAO,UAGf"}