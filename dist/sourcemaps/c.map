{"version":3,"file":"c.min.js","sources":["../../src/libs/highlight-es/languages/c.js"],"sourcesContent":["/*\r\nLanguage: C\r\nCategory: common, system\r\nWebsite: https://en.wikipedia.org/wiki/C_(programming_language)\r\n*/\r\n\r\n/** @type LanguageFn */\r\nexport default function(hljs) {\r\n  const regex = hljs.regex;\r\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\r\n  // not include such support nor can we be sure all the grammars depending\r\n  // on it would desire this behavior\r\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\\\\n/ } ] });\r\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\r\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\r\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\r\n  const FUNCTION_TYPE_RE = '('\r\n    + DECLTYPE_AUTO_RE + '|'\r\n    + regex.optional(NAMESPACE_RE)\r\n    + '[a-zA-Z_]\\\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)\r\n  + ')';\r\n\r\n\r\n  const TYPES = {\r\n    className: 'type',\r\n    variants: [\r\n      { begin: '\\\\b[a-z\\\\d_]*_t\\\\b' },\r\n      { match: /\\batomic_[a-z]{3,6}\\b/ }\r\n    ]\r\n\r\n  };\r\n\r\n  // https://en.cppreference.com/w/cpp/language/escape\r\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\r\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\r\n  const STRINGS = {\r\n    className: 'string',\r\n    variants: [\r\n      {\r\n        begin: '(u8?|U|L)?\"',\r\n        end: '\"',\r\n        illegal: '\\\\n',\r\n        contains: [ hljs.BACKSLASH_ESCAPE ]\r\n      },\r\n      {\r\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\r\n        end: '\\'',\r\n        illegal: '.'\r\n      },\r\n      hljs.END_SAME_AS_BEGIN({\r\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\r\n        end: /\\)([^()\\\\ ]{0,16})\"/\r\n      })\r\n    ]\r\n  };\r\n\r\n  const NUMBERS = {\r\n    className: 'number',\r\n    variants: [\r\n      { begin: '\\\\b(0b[01\\']+)' },\r\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },\r\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\r\n    ],\r\n    relevance: 0\r\n  };\r\n\r\n  const PREPROCESSOR = {\r\n    className: 'meta',\r\n    begin: /#\\s*[a-z]+\\b/,\r\n    end: /$/,\r\n    keywords: { keyword:\r\n        'if else elif endif define undef warning error line '\r\n        + 'pragma _Pragma ifdef ifndef include' },\r\n    contains: [\r\n      {\r\n        begin: /\\\\\\n/,\r\n        relevance: 0\r\n      },\r\n      hljs.inherit(STRINGS, { className: 'string' }),\r\n      {\r\n        className: 'string',\r\n        begin: /<.*?>/\r\n      },\r\n      C_LINE_COMMENT_MODE,\r\n      hljs.C_BLOCK_COMMENT_MODE\r\n    ]\r\n  };\r\n\r\n  const TITLE_MODE = {\r\n    className: 'title',\r\n    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\r\n    relevance: 0\r\n  };\r\n\r\n  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\r\n\r\n  const C_KEYWORDS = [\r\n    \"asm\",\r\n    \"auto\",\r\n    \"break\",\r\n    \"case\",\r\n    \"continue\",\r\n    \"default\",\r\n    \"do\",\r\n    \"else\",\r\n    \"enum\",\r\n    \"extern\",\r\n    \"for\",\r\n    \"fortran\",\r\n    \"goto\",\r\n    \"if\",\r\n    \"inline\",\r\n    \"register\",\r\n    \"restrict\",\r\n    \"return\",\r\n    \"sizeof\",\r\n    \"struct\",\r\n    \"switch\",\r\n    \"typedef\",\r\n    \"union\",\r\n    \"volatile\",\r\n    \"while\",\r\n    \"_Alignas\",\r\n    \"_Alignof\",\r\n    \"_Atomic\",\r\n    \"_Generic\",\r\n    \"_Noreturn\",\r\n    \"_Static_assert\",\r\n    \"_Thread_local\",\r\n    // aliases\r\n    \"alignas\",\r\n    \"alignof\",\r\n    \"noreturn\",\r\n    \"static_assert\",\r\n    \"thread_local\",\r\n    // not a C keyword but is, for all intents and purposes, treated exactly like one.\r\n    \"_Pragma\"\r\n  ];\r\n\r\n  const C_TYPES = [\r\n    \"float\",\r\n    \"double\",\r\n    \"signed\",\r\n    \"unsigned\",\r\n    \"int\",\r\n    \"short\",\r\n    \"long\",\r\n    \"char\",\r\n    \"void\",\r\n    \"_Bool\",\r\n    \"_Complex\",\r\n    \"_Imaginary\",\r\n    \"_Decimal32\",\r\n    \"_Decimal64\",\r\n    \"_Decimal128\",\r\n    // modifiers\r\n    \"const\",\r\n    \"static\",\r\n    // aliases\r\n    \"complex\",\r\n    \"bool\",\r\n    \"imaginary\"\r\n  ];\r\n\r\n  const KEYWORDS = {\r\n    keyword: C_KEYWORDS,\r\n    type: C_TYPES,\r\n    literal: 'true false NULL',\r\n    // TODO: apply hinting work similar to what was done in cpp.js\r\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream '\r\n      + 'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set '\r\n      + 'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos '\r\n      + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp '\r\n      + 'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper '\r\n      + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow '\r\n      + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp '\r\n      + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan '\r\n      + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\r\n  };\r\n\r\n  const EXPRESSION_CONTAINS = [\r\n    PREPROCESSOR,\r\n    TYPES,\r\n    C_LINE_COMMENT_MODE,\r\n    hljs.C_BLOCK_COMMENT_MODE,\r\n    NUMBERS,\r\n    STRINGS\r\n  ];\r\n\r\n  const EXPRESSION_CONTEXT = {\r\n    // This mode covers expression context where we can't expect a function\r\n    // definition and shouldn't highlight anything that looks like one:\r\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\r\n    variants: [\r\n      {\r\n        begin: /=/,\r\n        end: /;/\r\n      },\r\n      {\r\n        begin: /\\(/,\r\n        end: /\\)/\r\n      },\r\n      {\r\n        beginKeywords: 'new throw return else',\r\n        end: /;/\r\n      }\r\n    ],\r\n    keywords: KEYWORDS,\r\n    contains: EXPRESSION_CONTAINS.concat([\r\n      {\r\n        begin: /\\(/,\r\n        end: /\\)/,\r\n        keywords: KEYWORDS,\r\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\r\n        relevance: 0\r\n      }\r\n    ]),\r\n    relevance: 0\r\n  };\r\n\r\n  const FUNCTION_DECLARATION = {\r\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\r\n    returnBegin: true,\r\n    end: /[{;=]/,\r\n    excludeEnd: true,\r\n    keywords: KEYWORDS,\r\n    illegal: /[^\\w\\s\\*&:<>.]/,\r\n    contains: [\r\n      { // to prevent it from being confused as the function title\r\n        begin: DECLTYPE_AUTO_RE,\r\n        keywords: KEYWORDS,\r\n        relevance: 0\r\n      },\r\n      {\r\n        begin: FUNCTION_TITLE,\r\n        returnBegin: true,\r\n        contains: [ hljs.inherit(TITLE_MODE, { className: \"title.function\" }) ],\r\n        relevance: 0\r\n      },\r\n      // allow for multiple declarations, e.g.:\r\n      // extern void f(int), g(char);\r\n      {\r\n        relevance: 0,\r\n        match: /,/\r\n      },\r\n      {\r\n        className: 'params',\r\n        begin: /\\(/,\r\n        end: /\\)/,\r\n        keywords: KEYWORDS,\r\n        relevance: 0,\r\n        contains: [\r\n          C_LINE_COMMENT_MODE,\r\n          hljs.C_BLOCK_COMMENT_MODE,\r\n          STRINGS,\r\n          NUMBERS,\r\n          TYPES,\r\n          // Count matching parentheses.\r\n          {\r\n            begin: /\\(/,\r\n            end: /\\)/,\r\n            keywords: KEYWORDS,\r\n            relevance: 0,\r\n            contains: [\r\n              'self',\r\n              C_LINE_COMMENT_MODE,\r\n              hljs.C_BLOCK_COMMENT_MODE,\r\n              STRINGS,\r\n              NUMBERS,\r\n              TYPES\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      TYPES,\r\n      C_LINE_COMMENT_MODE,\r\n      hljs.C_BLOCK_COMMENT_MODE,\r\n      PREPROCESSOR\r\n    ]\r\n  };\r\n\r\n  return {\r\n    name: \"C\",\r\n    aliases: [ 'h' ],\r\n    keywords: KEYWORDS,\r\n    // Until differentiations are added between `c` and `cpp`, `c` will\r\n    // not be auto-detected to avoid auto-detect conflicts between C and C++\r\n    disableAutodetect: true,\r\n    illegal: '</',\r\n    contains: [].concat(\r\n      EXPRESSION_CONTEXT,\r\n      FUNCTION_DECLARATION,\r\n      EXPRESSION_CONTAINS,\r\n      [\r\n        PREPROCESSOR,\r\n        {\r\n          begin: hljs.IDENT_RE + '::',\r\n          keywords: KEYWORDS\r\n        },\r\n        {\r\n          className: 'class',\r\n          beginKeywords: 'enum class struct union',\r\n          end: /[{;:<>=]/,\r\n          contains: [\r\n            { beginKeywords: \"final class struct\" },\r\n            hljs.TITLE_MODE\r\n          ]\r\n        }\r\n      ]),\r\n    exports: {\r\n      preprocessor: PREPROCESSOR,\r\n      strings: STRINGS,\r\n      keywords: KEYWORDS\r\n    }\r\n  };\r\n}\r\n"],"names":["c","hljs","regex","C_LINE_COMMENT_MODE","COMMENT","contains","begin","DECLTYPE_AUTO_RE","NAMESPACE_RE","FUNCTION_TYPE_RE","optional","TYPES","className","variants","match","STRINGS","end","illegal","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","NUMBERS","relevance","PREPROCESSOR","keywords","keyword","inherit","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","KEYWORDS","type","literal","built_in","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","concat","FUNCTION_DECLARATION","returnBegin","excludeEnd","name","aliases","disableAutodetect","exports","preprocessor","strings"],"mappings":"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"}